let packageName = "font-manager";
let fs = require('fire-fs');
let Fs = require('fs');

Editor.Panel.extend({
    style: `
    .box {
        flex: 1;
        height: 150px;

        padding: 10px;
        padding-top: 0px;

        overflow-y: auto;
        overflow-x: hidden;
    }
    .btnbox {
        padding: 5px;
    }
    ul {
        list-style-type: none;
        margin: 0;
        padding: 0;
        overflow: hidden;
        background-color: #333;
    }
    
    li {
        float: left;
    }
    
    li a {
        display: block;
        color: white;
        text-align: center;
        padding: 14px 16px;
        text-decoration: none;
    }
    
    li a:hover {
        background-color: #111;
    }
  `,
    template: `
    <div >
    <!--
        <div class="layout horizontal justified">
            <ui-button class="transparent" @confirm="changeLanguage('cn')">简体中文</ui-button>
            <ui-button class="transparent" @confirm="changeLanguage('tw')">繁体中文</ui-button>
            <ui-button class="transparent" @confirm="changeLanguage('en')">英文</ui-button>
            <ui-button class="transparent" @confirm="changeLanguage('kr')">韩文</ui-button>
        </div>
        -->
        <ui-box-container id='colors'>
            <div class="layout horizontal justified" class='btnbox'>
                <ui-button @confirm="addColor">add color</ui-button>
                <ui-button @confirm="refreshColor">Reset Color</ui-button>
            </div>
            <!-- 一些标签元素 -->
            <div class='box'>
                <ui-drop-area v-for="item in items" droppable="file" class="layout horizontal justified" style="padding-top:5px" >
                    <div class="flex-1">{{item.name}}</div>
                    <ui-input placeholder="color name" class="flex-1" value="{{item.color}}"></ui-input>
                    <ui-color class="flex-2"></ui-color>
                </ui-drop-area>
            </div>
        </ui-box-container>
        <ui-box-container id='fonts'>
            <div class="layout horizontal justified" class='btnbox'>
                <ui-button @confirm="addFont">add font</ui-button>
                <ui-button @confirm="refreshFont">Reset font</ui-button>
            </div>
            <div class='box'>
                <ui-drop-area v-for="fontItem in fontItems" droppable="file" class="layout horizontal justified" style="padding-top:20px">
                    <div class="flex-1" class="self-center" >{{fontItem.name}}</div>
                    <ui-asset class="flex-2" droppable="asset"></ui-asset>  
                </ui-drop-area>
            </div>      
        </ui-box-container>
        <ui-box-container id='fontSize'>
            <div class="layout horizontal justified" class='btnbox'>
                <ui-button @confirm="addFontSize">add Size</ui-button>
                <ui-button @confirm="refreshFontSize">Reset Size</ui-button>
            </div>
            <div class='box'>
                <ui-drop-area v-for="fontSizeItem in fontSizeItems" droppable="file" class="layout horizontal justified" style="padding-top:20px">
                    <div class="flex-1" class="self-center" >{{fontSizeItem.name}}</div>
                    <ui-num-input class="flex-2" placeholder="Search..."></ui-num-input> 
                </ui-drop-area> 
            </div>     
        </ui-box-container>
        <div class="layout horizontal around-justified btnbox">
            <ui-button id='saveBtn'>Save</ui-button>
            <ui-button @confirm="onRefresh">Reset</ui-button>
        </div>
    </div>
    `,
    $: {
        saveBtn: '#saveBtn',
        colors: '#colors',
        fonts: '#fonts',
        fontSize: '#fontSize',
      },

    Language: 'cn',
    FONT_INFO: {},
  
    ready () {
        let colorNum = 3;
        let fontNum = 3;
        let fontSizeNum = 3;
        let self = this;
      new window.Vue({
        el: this.shadowRoot,
        data: {
          items: [
            { name: 'Color_1', color: '#09f'},
            { name: 'Color_2', color: '#09f'},
            { name: 'Color_3', color: '#09f'}
          ],
          fontItems: [
              {name: 'font_1',uuid: null},
              {name: 'font_2',uuid: null},
              {name: 'font_3',uuid: null}
          ],
          fontSizeItems: [
              {name: 'Size_1'},
              {name: 'Size_2'},
              {name: 'Size_3'}
          ],
        },
        created: function(){
            self.readFontFromJson();
            if(JSON.stringify(self.FONT_INFO) ==='{}'){
                this.refreshAll(1);
            }else{
                let message = self.Language;
                let colors = self.FONT_INFO['colors'];
                if(colors){
                    this.setColors(colors);
                }else{
                    this.refreshColor(1);
                }

                let fonts = self.FONT_INFO['fonts'];
                if(fonts){
                    this.setFonts(fonts);
                }else{
                    this.refreshFont(1);
                }

                let sizes = self.FONT_INFO['fontSizes'];
                if(sizes){
                    this.setSizes(sizes);
                }else{
                    this.refreshFontSize(1);
                }
                this.$nextTick(function(){
                    if(colors){
                        self.setPanelColor(self.FONT_INFO['colors'], self.FONT_INFO['colorNames']);
                    }
                    if(fonts){
                        self.setPanelFont(self.FONT_INFO['fonts']);
                    }
                    if(sizes){
                        self.setPanelFontSizes(self.FONT_INFO['fontSizes']);
                    }
                });
            }
        },

        methods: {
            addColor ( event ) {
                event.stopPropagation();
                colorNum++;
                this.items.push({name: "Color_"+colorNum, color: "#fff"});
                this.$nextTick(function(){
                    self.setPanelColor();
                });
            },
            addFont(event){
                event.stopPropagation();
                fontNum++;
                this.fontItems.push({name: 'font_'+fontNum});
            },
            addFontSize(event){
                event.stopPropagation();
                fontSizeNum++;
                this.fontSizeItems.push({name: 'Size_'+fontSizeNum});
            },
            onRefresh(event){
                colorNum = 3;
                fontNum = 3;
                fontSizeNum = 3;
                this.items =  [
                    { name: 'Color_1', color: '#09f'},
                    { name: 'Color_2', color: '#09f'},
                    { name: 'Color_3', color: '#09f'}
                  ];
                this.fontItems = [
                    {name: 'font_1'},
                    {name: 'font_2'},
                    {name: 'font_3'}
                ];
                this.fontSizeItems = [
                    {name: 'Size_1'},
                    {name: 'Size_2'},
                    {name: 'Size_3'}
                ];
            },

            refreshColor( event ){
                colorNum = 3;
                this.items =  [
                    { name: 'Color_1', color: '#09f'},
                    { name: 'Color_2', color: '#09f'},
                    { name: 'Color_3', color: '#09f'}
                  ];
            },

            refreshFont(event){
                fontNum = 3;
                this.fontItems = [
                    {name: 'font_1'},
                    {name: 'font_2'},
                    {name: 'font_3'}
                ];
                // let text = self.$fonts.getElementsByTagName('ui-asset');
                // Editor.log(text.length);
                // for(let i = 0; i < text.length; i++){
                //     Editor.log(text[i]);
                //     text[i].value = "4fd6909f-2181-421a-9966-01ab8fdc396c";
                // }
            },
            refreshFontSize(event){
                fontSizeNum = 3;
                this.fontSizeItems = [
                    {name: 'Size_1'},
                    {name: 'Size_2'},
                    {name: 'Size_3'}
                ];
            },

            refreshAll(event){
                this.refreshColor(event);
                this.refreshFont(event);
                this.refreshFontSize(event);
            },

            setColors(colors){
                this.items = [];
                for(let i = 0; i < colors.length; i++){
                    let num = i + 1;
                    this.items.push({name: "Color_"+num, color: "#fff"});
                }
                colorNum = colors.length;
            },

            setFonts(fonts){
                this.fontItems = [];
                for(let i = 0; i < fonts.length; i++){
                    let num = i + 1;
                    this.fontItems.push({name: "Font_"+num});
                }
                fontNum = fonts.length;
            },

            setSizes(fontSizes){
                this.fontSizeItems = [];
                for(let i = 0; i < fontSizes.length; i++){
                    let num = i + 1;
                    this.fontSizeItems.push({name: "Size_"+num});
                }
                fontSizeNum = fontSizes.length;
            },

            changeLanguage(message){
                if(message == self.Language){
                    Editor.log('========= no change ==========');
                    return
                }
                Editor.log('=== changeLanguage ======');
                let colors = self.getPanelColor();
                let fonts = self.getPanelFonts();
                let fontSizes = self.getPanelFontSizes();
            
                self.FONT_INFO[self.Language] = {};
                self.FONT_INFO[self.Language]["fonts"] = fonts;
                self.FONT_INFO[self.Language]["colors"] = colors.color;
                self.FONT_INFO[self.Language]["colorNames"] = colors.colorName;
                self.FONT_INFO[self.Language]["fontSizes"] = fontSizes;

                self.Language = message;
                if(!self.FONT_INFO[message]){
                    Editor.log("这种语言的信息为空");
                    this.refreshAll(1);
                }
                else{
                    // TODO 将 FONT_INFO 中的信息刷到面板中
                    colors = self.FONT_INFO[message]['colors'];
                    this.setColors(colors);
                    this.setFonts(self.FONT_INFO[message]['fonts']);
                    this.setSizes(self.FONT_INFO[message]['fontSizes']);
                    this.$nextTick(function(){
                        self.setPanelColor(self.FONT_INFO[message]['colors'], self.FONT_INFO[message]['colorNames']);
                        self.setPanelFont(self.FONT_INFO[message]['fonts']);
                        self.setPanelFontSizes(self.FONT_INFO[message]['fontSizes']);
                    });
                }
            },
        }
      });

        this.$saveBtn.addEventListener('confirm', ()=>{
            Editor.log("save");
            let colors = self.getPanelColor();
            let fonts = self.getPanelFonts();
            let fontSizes = self.getPanelFontSizes();
            
            self.FONT_INFO = {};
            self.FONT_INFO["fonts"] = fonts;
            self.FONT_INFO["colors"] = colors.color;
            self.FONT_INFO["colorNames"] = colors.colorName;
            self.FONT_INFO["fontSizes"] = fontSizes;

            // let message = self.FONT_INFO;
            // self.translateColorsAlpha(message);
            // Editor.Ipc.sendToMain('font-manager:save',self.FONT_INFO);

            let font_info_str = JSON.stringify(self.FONT_INFO, null, 2);

            let path = Editor.Project.path + '/packages/font-manager/config/font.json';
            fs.writeFileSync(path,font_info_str,{encoding:'utf8',flag:'w+'});
        });

    },

    /**
     * 读取json文件的内容
     */
    readFontFromJson(){
        let path = Editor.Project.path + '/packages/font-manager/config/font.json';
        if(!fs.existsSync(path)){
            this.FONT_INFO = {};
            return
        }
        let data = fs.readFileSync(path,{encoding:'utf8', flag:'r+'});
        // Editor.log( data);
        this.FONT_INFO = JSON.parse(data);
        if(typeof this.FONT_INFO == 'object'){
            // Editor.log(this.FONT_INFO);
        }else{
            this.FONT_INFO = {};
        }
    },

    /**
     * 设置面板中的颜色
     * colors 一个包含颜色和颜色名字的数组
     */
    setPanelColor(colors, colorNames){
        let html = this.$colors.getElementsByTagName('ui-color');
        let colorNameHtml = this.$colors.getElementsByTagName('ui-input');
        for(let i = 0; i < html.length; i++){
            // html[i].value = '#0F0F00';
            html[i].value = colors[i];
            colorNameHtml[i].value = colorNames[i];
        }
    },

    /**
     * 设置面板中的字体
     * @param {Array} fonts 字体的uuid 
     */
    setPanelFont(fonts){
        let html = this.$fonts.getElementsByTagName('ui-asset');
        for(let i = 0; i < html.length; i++){
            html[i].value = fonts[i];
        }
    },

    /**
     * 设置面板中的字体字号大小
     * @param {Array} fontSizes 字体字号的数组
     */
    setPanelFontSizes(fontSizes){
        let html = this.$fontSize.getElementsByTagName('ui-num-input');
        for(let i = 0; i < html.length; i++){
            html[i].value = fontSizes[i];
        }
    },

    /**
     * 获取插件面板中设置的颜色
     */
    getPanelColor(){
        let html = this.$colors.getElementsByTagName('ui-color');
        let colors = [];
        for(let i = 0; i < html.length; i++){
            let tem = html[i].value;
            colors.push(tem);
        }
        colors.push([255,255,255,255]);
        html = this.$colors.getElementsByTagName('ui-input');
        let colorNames = [];
        for(let i = 0; i < html.length; i++){
            let tem = html[i].value;
            if(tem=='')
            {
                tem = this.getRGBName(colors[i]);
            }
            colorNames.push(tem);
        }
        colorNames.push('white');
        // Editor.log("===============color==============");
        // Editor.log(colors);
        // Editor.log("======color name======");
        // Editor.log(colorNames);
        return {
            color: colors,
            colorName: colorNames
        };
    },

    /**
     * 获取插件面板中设置的fonts
     */
    getPanelFonts(){
         let html = this.$fonts.getElementsByTagName('ui-asset');
         let fonts = [];
         for(let i = 0; i < html.length; i++){
            fonts.push(html[i].value);
         }
         return fonts;
    },

    /**
     * 获取插件面板中设置的字号
     */
    getPanelFontSizes(){
        let html = this.$fontSize.getElementsByTagName('ui-num-input');
        let fontSizes = [];
        for(let i = 0; i < html.length; i++){
            fontSizes.push(html[i].value);
        }
        fontSizes.push(28);
        return fontSizes;
    },

    /**
     * 获取 RGB 名字
     */
    getRGBName(color){
        let name = 'RGB_';
        for(let i = 0; i < 3; i++){
            let v = color[i];
            let x = v.toString(16).toUpperCase();
            if(v < 16){
                x = '0' + x;
            }
            name = name + x; 
        }
        // name = name+color[0].toString(16).toUpperCase()+color[1].toString(16).toUpperCase()+color[2].toString(16).toUpperCase();
        return name;
    },

    /**
     * 解码 alpha 值
     * 将 0~1 解码成 0~255
     */
    decodeAlpha(alpha){
        return parseInt(alpha * 255);
    },

    /**
     * 编码 alpha 值
     * 将 0~255 编码成 0~1
     */
    encodeAlphe(alpha){
        return alpha/255;
    }

  });