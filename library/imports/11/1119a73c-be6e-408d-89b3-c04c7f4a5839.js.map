{"version":3,"sources":["../../../../../../../assets/Scripts/src/behavior/decorators/assets/Scripts/src/behavior/decorators/Repeater.ts"],"names":[],"mappings":";;;;;AAAA,+CAA0C;AAC1C,0CAAqD;AAIrD;;;;;;;;IAQI;AAEJ;IAAsC,4BAAS;IAG7C;;;;;;;;;;QAUI;IACJ;QAAA,iBAMC;QALC,IAAI,IAAI,GAAgB;YACtB,IAAI,EAAE,UAAU;YAChB,KAAK,EAAE,mBAAmB;SAC3B,CAAA;QACD,QAAA,kBAAM,IAAI,CAAC,SAAC;;IACd,CAAC;IAED;;;;QAII;IACJ,uBAAI,GAAJ,UAAK,IAAI;QACP,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC;IACrD,CAAC;IAED;;;;QAII;IACJ,uBAAI,GAAJ,UAAK,IAAI;QACP,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE;YACf,OAAO,iBAAK,CAAC;SACd;QAED,IAAI,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC;QACxD,IAAI,MAAM,GAAG,mBAAO,CAAC;QAErB,OAAO,IAAI,CAAC,UAAU,CAAC,OAAO,GAAG,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE;YACjE,aAAa;YACb,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;YAEnC,IAAI,MAAM,IAAI,mBAAO,IAAI,MAAM,IAAI,mBAAO,EAAE;gBACxC,CAAC,EAAE,CAAC;aACP;iBAAM;gBACL,MAAM;aACP;SACF;QAED,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC;QACnD,OAAO,MAAM,CAAC;IAChB,CAAC;IACH,eAAC;AAAD,CA1DA,AA0DC,CA1DqC,mBAAS,GA0D9C;;AAAA,CAAC","file":"","sourceRoot":"../../../../../../../assets/Scripts/src/behavior/decorators","sourcesContent":["import Decorator from '../core/Decorator';\nimport {SUCCESS, ERROR, FAILURE} from '../constants';\nimport BaseNode from '../core/BaseNode';\nimport { BaseNodeData } from '../interf';\n\n/**\n * Repeater is a decorator that repeats the tick signal until the child node\n * return `RUNNING` or `ERROR`. Optionally, a maximum number of repetitions\n * can be defined.\n *\n * @module b3\n * @class Repeater\n * @extends Decorator\n **/\n\nexport default class Repeater extends Decorator {\n  public maxLoop: number;\n\n  /**\n   * Creates an instance of MaxTime.\n   *\n   * - **maxLoop** (*Integer*) Maximum number of repetitions. Default to -1 (infinite).\n   * - **child** (*BaseNode*) The child node.\n   *\n   * @param {Object} params Object with parameters.\n   * @param {Number} params.maxLoop Maximum number of repetitions. Default to -1 (infinite).\n   * @param {BaseNode} params.child The child node.\n   * @memberof Repeater\n   **/\n  constructor() {\n    let data:BaseNodeData = {\n      name: 'Repeater',\n      title: 'Repeat <maxLoop>x'\n    }\n    super(data);\n  }\n\n  /**\n   * Open method.\n   * @method open\n   * @param {Tick} tick A tick instance.\n   **/\n  open(tick) {\n    tick.blackboard.set('i', 0, tick.tree.id, this.id);\n  }\n\n  /**\n   * Tick method.\n   * @method tick\n   * @param {Tick} tick A tick instance.\n   **/\n  tick(tick) {\n    if (!this.child) {\n      return ERROR;\n    }\n\n    var i = tick.blackboard.get('i', tick.tree.id, this.id);\n    var status = SUCCESS;\n\n    while (this.properties.maxLoop < 0 || i < this.properties.maxLoop) {\n      // @ts-ignore\n      status = this.child._execute(tick);\n\n      if (status == SUCCESS || status == FAILURE) {\n          i++;\n      } else {\n        break;\n      }\n    }\n\n    tick.blackboard.set('i', i, tick.tree.id, this.id);\n    return status;\n  }\n};\n"]}