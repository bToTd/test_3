{"version":3,"sources":["../../../assets/assets/b3core.0.1.0module.js"],"names":["b3","VERSION","SUCCESS","FAILURE","RUNNING","ERROR","COMPOSITE","DECORATOR","ACTION","CONDITION","createUUID","s","hexDigits","i","substr","Math","floor","random","uuid","join","Class","baseClass","cls","params","initialize","prototype","constructor","Blackboard","p","_baseMemory","_treeMemory","_getTreeMemory","treeScope","_getNodeMemory","treeMemory","nodeScope","memory","_getMemory","set","key","value","get","Tick","tree","debug","target","blackboard","_openNodes","_nodeCount","_enterNode","node","push","_openNode","_tickNode","_closeNode","pop","_exitNode","BehaviorTree","id","title","description","properties","root","load","data","names","nodes","spec","name","EvalError","parameters","category","children","length","cid","child","dump","stack","tick","state","_execute","lastOpenNodes","currOpenNodes","slice","start","min","_close","BaseNode","_enter","_open","status","_tick","_exit","enter","open","close","exit","Action","__BaseNode_initialize","Composite","settings","Decorator","Condition","Sequence","Priority","MemSequence","MemPriority","Inverter","Limiter","__Decorator_initialize","maxLoop","MaxTime","maxTime","startTime","Date","getTime","currTime","Repeater","RepeatUntilFailure","RepeatUntilSuccess","Error","Failer","Runner","Succeeder","Wait","__Action_initialize","endTime","milliseconds","module","exports"],"mappings":"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","file":"b3core.0.1.0module.js","sourceRoot":"../../../assets","sourcesContent":["/**\n * b3\n * \n * Copyright (c) 2014 Renato de Pontes Pereira.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to \n * deal in the Software without restriction, including without limitation the \n * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n * sell copies of the Software, and to permit persons to whom the Software is \n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING \n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n * IN THE SOFTWARE.\n**/\n\n//this.b3 = this.b3 || {};\nlet b3 = {};\n\n/**\n * Behavior3JS\n * ===========\n *\n * * * *\n * \n * **Behavior3JS** is a Behavior Tree library written in JavaScript. It \n * provides structures and algorithms that assist you in the task of creating \n * intelligent agents for your game or application. Check it out some features \n * of Behavior3JS:\n * \n * - Based on the work of (Marzinotto et al., 2014), in which they propose a \n *   **formal**, **consistent** and **general** definition of Behavior Trees;\n * - **Optimized to control multiple agents**: you can use a single behavior \n *   tree instance to handle hundreds of agents;\n * - It was **designed to load and save trees in a JSON format**, in order to \n *   use, edit and test it in multiple environments, tools and languages;\n * - A **cool visual editor** which you can access online;\n * - Several **composite, decorator and action nodes** available within the \n *   library. You still can define your own nodes, including composites and \n *   decorators;\n * - **Completely free**, the core module and the visual editor are all published\n *   under the MIT License, which means that you can use them for your open source\n *   and commercial projects;\n * - **Lightweight**, only 11.5KB!\n * \n * Visit http://behavior3js.guineashots.com to know more!\n *\n * \n * Core Classes and Functions\n * --------------------------\n * \n * This library include the following core structures...\n *\n * **Public:**\n * \n * - **BehaviorTree**: the structure that represents a Behavior Tree;\n * - **Blackboard**: represents a \"memory\" in an agent and is required to to \n *   run a `BehaviorTree`;\n * - **Composite**: base class for all composite nodes;\n * - **Decorator**: base class for all decorator nodes;\n * - **Action**: base class for all action nodes;\n * - **Condition**: base class for all condition nodes;\n *\n * **Internal:**\n * \n * \n * - **Tick**: used as container and tracking object through the tree during \n *   the tick signal;\n * - **BaseNode**: the base class that provide all common node features;\n * \n * *Some classes are used internally on Behavior3JS, but you may need to access\n * its functionalities eventually, specially the `Tick` object.*\n *\n * \n * Nodes Included \n * --------------\n *\n * **Composite Nodes**: \n * \n * - Sequence;\n * - Priority;\n * - MemSequence;\n * - MemPriority;\n * \n * \n * **Decorators**: \n * \n * - Inverter;\n * - Limiter\n * - MaxTime;\n * - Repeater;\n * - RepeaterUntilFailure;\n * - RepeaterUntilSuccess;\n *\n * \n * **Actions**:\n * \n * - Succeeder;\n * - Failer;\n * - Error;\n * - Runner;\n * - Wait.\n * \n * @module Behavior3JS\n * @main Behavior3JS\n**/\n\n(function() {\n\"use strict\";\n\n/**\n * List of all constants in Behavior3JS.\n *\n * @class Constants\n**/\n\n/**\n * Version of the library.\n * \n * @property VERSION\n * @type {String}\n */\nb3.VERSION   = '0.1.0';\n\n/**\n * Returned when a criterion has been met by a condition node or an action node\n * has been completed successfully.\n * \n * @property SUCCESS\n * @type {Integer}\n */\nb3.SUCCESS   = 1;\n\n/**\n * Returned when a criterion has not been met by a condition node or an action \n * node could not finish its execution for any reason.\n * \n * @property FAILURE\n * @type {Integer}\n */\nb3.FAILURE   = 2;\n\n/**\n * Returned when an action node has been initialized but is still waiting the \n * its resolution.\n * \n * @property FAILURE\n * @type {Integer}\n */\nb3.RUNNING   = 3;\n\n/**\n * Returned when some unexpected error happened in the tree, probably by a \n * programming error (trying to verify an undefined variable). Its use depends \n * on the final implementation of the leaf nodes.\n * \n * @property ERROR\n * @type {Integer}\n */\nb3.ERROR     = 4;\n\n\n/**\n * Describes the node category as Composite.\n * \n * @property COMPOSITE\n * @type {String}\n */\nb3.COMPOSITE = 'composite';\n\n/**\n * Describes the node category as Decorator.\n * \n * @property DECORATOR\n * @type {String}\n */\nb3.DECORATOR = 'decorator';\n\n/**\n * Describes the node category as Action.\n * \n * @property ACTION\n * @type {String}\n */\nb3.ACTION    = 'action';\n\n/**\n * Describes the node category as Condition.\n * \n * @property CONDITION\n * @type {String}\n */\nb3.CONDITION = 'condition';\n\n\n/**\n * List of internal and helper functions in Behavior3JS.\n * \n * @class Utils\n**/\n\n\n/**\n * This function is used to create unique IDs for trees and nodes.\n * \n * (consult http://www.ietf.org/rfc/rfc4122.txt).\n *\n * @method createUUID\n * @return {String} A unique ID.\n**/\nb3.createUUID = function() {\n    var s = [];\n    var hexDigits = \"0123456789abcdef\";\n    for (var i = 0; i < 36; i++) {\n        s[i] = hexDigits.substr(Math.floor(Math.random() * 0x10), 1);\n    }\n    // bits 12-15 of the time_hi_and_version field to 0010\n    s[14] = \"4\";\n\n    // bits 6-7 of the clock_seq_hi_and_reserved to 01\n    s[19] = hexDigits.substr((s[19] & 0x3) | 0x8, 1);\n\n    s[8] = s[13] = s[18] = s[23] = \"-\";\n\n    var uuid = s.join(\"\");\n    return uuid;\n}\n\n/**\n * Class is a meta-factory function to create classes in JavaScript. It is a\n * shortcut for the CreateJS syntax style. By default, the class created by \n * this function have an initialize function (the constructor). Optionally, you\n * can specify the inheritance by passing another class as parameter.\n *\n * By default, all classes created using this function, may receives only a\n * settings parameter as argument. This pattern is commonly used by jQuery and \n * its plugins.\n *\n * Usage\n * -----\n *\n *     // Creating a simple class\n *     var BaseClass = b3.Class();\n *\n *     // Using inheritance\n *     var ChildClass = b3.Class(BaseClass);\n *\n *     // Defining the constructor\n *     ChildClass.prototype.initialize = function(settings) { ... }\n *\n * @method Class\n * @param {Object} [baseClass] The super class.\n * @return {Object} A new class.\n**/\nb3.Class = function(baseClass) {\n    // create a new class\n    var cls = function(params) {\n        this.initialize(params);\n    }\n    \n    // if base class is provided, inherit\n    if (baseClass) {\n        cls.prototype = new baseClass();\n        cls.prototype.constructor = cls;\n    }\n    \n    // create initialize if does not exist on baseClass\n    cls.prototype.initialize = cls.prototype.initialize || function() {};\n\n    return cls;\n}\n\n})();/**\n * Blackboard\n *\n * Copyright (c) 2014 Renato de Pontes Pereira.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to \n * deal in the Software without restriction, including without limitation the \n * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n * sell copies of the Software, and to permit persons to whom the Software is \n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING \n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n * IN THE SOFTWARE.\n**/\n\n/**\n * @module Behavior3JS\n **/\n\n// namespace:\n//this.b3 = this.b3 || {};\n\n(function() {\n\"use strict\";\n\n/**\n * The Blackboard is the memory structure required by `BehaviorTree` and its \n * nodes. It only have 2 public methods: `set` and `get`. These methods works \n * in 3 different contexts: global, per tree, and per node per tree.\n * \n * Suppose you have two different trees controlling a single object with a \n * single blackboard, then:\n *\n * - In the global context, all nodes will access the stored information. \n * - In per tree context, only nodes sharing the same tree share the stored \n *   information.\n * - In per node per tree context, the information stored in the blackboard can\n *   only be accessed by the same node that wrote the data.\n *   \n * The context is selected indirectly by the parameters provided to these \n * methods, for example:\n * \n *     // getting/setting variable in global context\n *     blackboard.set('testKey', 'value');\n *     var value = blackboard.get('testKey');\n *     \n *     // getting/setting variable in per tree context\n *     blackboard.set('testKey', 'value', tree.id);\n *     var value = blackboard.get('testKey', tree.id);\n *     \n *     // getting/setting variable in per node per tree context\n *     blackboard.set('testKey', 'value', tree.id, node.id);\n *     var value = blackboard.get('testKey', tree.id, node.id);\n * \n * Note: Internally, the blackboard store these memories in different objects,\n *  being the global on `_baseMemory`, the per tree on `_treeMemory` and the \n *  per node per tree dynamically create inside the per tree memory (it is \n *  accessed via `_treeMemory[id].nodeMemory`). Avoid to use these variables \n *  manually, use `get` and `set` instead.\n *  \n * @class Blackboard\n**/\nvar Blackboard = b3.Class();\n\nvar p = Blackboard.prototype;\n\n    /**\n     * Initialization method.\n     *\n     * @method initialize\n     * @constructor\n    **/\n    p.initialize = function() {\n        this._baseMemory = {};\n        this._treeMemory = {};\n    }\n\n    /**\n     * Internal method to retrieve the tree context memory. If the memory does\n     * not exist, this method creates it.\n     *\n     * @method _getTreeMemory\n     * @param {string} treeScope The id of the tree in scope.\n     * @returns {Object} The tree memory.\n     * @protected\n    **/\n    p._getTreeMemory = function(treeScope) {\n        if (!this._treeMemory[treeScope]) {\n            this._treeMemory[treeScope] = {\n                'nodeMemory'         : {},\n                'openNodes'          : [],\n                'traversalDepth'     : 0,\n                'traversalCycle'     : 0,\n            };\n        }\n        return this._treeMemory[treeScope];\n    };\n\n    /**\n     * Internal method to retrieve the node context memory, given the tree \n     * memory. If the memory does not exist, this method creates is.\n     *\n     * @method _getNodeMemory\n     * @param {String} treeMemory the tree memory.\n     * @param {String} nodeScope The id of the node in scope.\n     * @returns {Object} The node memory.\n     * @protected\n    **/\n    p._getNodeMemory = function(treeMemory, nodeScope) {\n        var memory = treeMemory['nodeMemory'];\n        if (!memory[nodeScope]) {\n            memory[nodeScope] = {};\n        }\n\n        return memory[nodeScope];\n    };\n\n    /**\n     * Internal method to retrieve the context memory. If treeScope and \n     * nodeScope are provided, this method returns the per node per tree \n     * memory. If only the treeScope is provided, it returns the per tree \n     * memory. If no parameter is provided, it returns the global memory. \n     * Notice that, if only nodeScope is provided, this method will still \n     * return the global memory.\n     *\n     * @method _getMemory\n     * @param {String} treeScope The id of the tree scope.\n     * @param {String} nodeScope The id of the node scope.\n     * @returns {Object} A memory object.\n     * @protected\n    **/\n    p._getMemory = function(treeScope, nodeScope) {\n        var memory = this._baseMemory;\n\n        if (treeScope) {\n            memory = this._getTreeMemory(treeScope);\n\n            if (nodeScope) {\n                memory = this._getNodeMemory(memory, nodeScope);\n            }\n        }\n\n        return memory;\n    };\n\n    /**\n     * Stores a value in the blackboard. If treeScope and nodeScope are \n     * provided, this method will save the value into the per node per tree \n     * memory. If only the treeScope is provided, it will save the value into \n     * the per tree memory. If no parameter is provided, this method will save \n     * the value into the global memory. Notice that, if only nodeScope is \n     * provided (but treeScope not), this method will still save the value into\n     * the global memory.\n     *\n     * @method set\n     * @param {String} key The key to be stored.\n     * @param {String} value The value to be stored.\n     * @param {String} treeScope The tree id if accessing the tree or node \n     *                           memory.\n     * @param {String} nodeScope The node id if accessing the node memory.\n    **/\n    p.set = function(key, value, treeScope, nodeScope) {\n        var memory = this._getMemory(treeScope, nodeScope);\n        memory[key] = value;\n    };\n\n    /**\n     * Retrieves a value in the blackboard. If treeScope and nodeScope are\n     * provided, this method will retrieve the value from the per node per tree\n     * memory. If only the treeScope is provided, it will retrieve the value\n     * from the per tree memory. If no parameter is provided, this method will\n     * retrieve from the global memory. If only nodeScope is provided (but\n     * treeScope not), this method will still try to retrieve from the global\n     * memory.\n     *\n     * @method get\n     * @param {String} key The key to be retrieved.\n     * @param {String} treeScope The tree id if accessing the tree or node \n     *                           memory.\n     * @param {String} nodeScope The node id if accessing the node memory.\n     * @returns {Object} The value stored or undefined.\n    **/\n    p.get = function(key, treeScope, nodeScope) {\n        var memory = this._getMemory(treeScope, nodeScope);\n        return memory[key];\n    };\n    \nb3.Blackboard = Blackboard;\n\n})();/**\n * Tick\n *\n * Copyright (c) 2014 Renato de Pontes Pereira.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to \n * deal in the Software without restriction, including without limitation the \n * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n * sell copies of the Software, and to permit persons to whom the Software is \n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING \n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n * IN THE SOFTWARE.\n**/\n\n/**\n * @module Behavior3JS\n **/\n\n// namespace:\n//this.b3 = this.b3 || {};\n\n(function() {\n\"use strict\";\n\n/**\n * A new Tick object is instantiated every tick by BehaviorTree. It is passed \n * as parameter to the nodes through the tree during the traversal.\n * \n * The role of the Tick class is to store the instances of tree, debug, target\n * and blackboard. So, all nodes can access these informations.\n * \n * For internal uses, the Tick also is useful to store the open node after the \n * tick signal, in order to let `BehaviorTree` to keep track and close them \n * when necessary.\n *\n * This class also makes a bridge between nodes and the debug, passing the node\n * state to the debug if the last is provided.\n *\n * @class Tick\n**/\nvar Tick = b3.Class();\n\nvar p = Tick.prototype;\n\n    /**\n     * The tree reference.\n     * \n     * @property tree\n     * @type {b3.BehaviorTree}\n     * @readOnly\n     */\n    \n    /**\n     * The debug reference.\n     * \n     * @property debug\n     * @type {Object}\n     * @readOnly\n     */\n    \n    /**\n     * The target object reference.\n     * \n     * @property target\n     * @type {Object}\n     * @readOnly\n     */\n    \n    /**\n     * The blackboard reference.\n     * \n     * @property blackboard\n     * @type {Blackboard}\n     * @readOnly\n     */\n    \n    /**\n     * The list of open nodes. Update during the tree traversal.\n     * \n     * @property _openNodes\n     * @type {Array}\n     * @protected\n     * @readOnly\n     */\n    \n    /**\n     * The number of nodes entered during the tick. Update during the tree \n     * traversal.\n     * \n     * @property _nodeCount\n     * @type {Integer}\n     * @protected\n     * @readOnly\n     */\n    \n    /**\n     * Initialization method.\n     *\n     * @method initialize\n     * @constructor\n    **/\n    p.initialize = function() {\n        // set by BehaviorTree\n        this.tree       = null;\n        this.debug      = null;\n        this.target     = null;\n        this.blackboard = null;\n\n        // updated during the tick signal\n        this._openNodes  = [];\n        this._nodeCount  = 0;\n    }\n\n    /**\n     * Called when entering a node (called by BaseNode).\n     *\n     * @method _enterNode\n     * @param {Object} node The node that called this method.\n     * @protected\n    **/\n    p._enterNode = function(node) {\n        this._nodeCount++;\n        this._openNodes.push(node);\n\n        // TODO: call debug here\n    }\n\n    /**\n     * Callback when opening a node (called by BaseNode). \n     *\n     * @method _openNode\n     * @param {Object} node The node that called this method.\n     * @protected\n    **/\n    p._openNode = function(node) {\n        // TODO: call debug here\n    }\n\n    /**\n     * Callback when ticking a node (called by BaseNode).\n     *\n     * @method _tickNode\n     * @param {Object} node The node that called this method.\n     * @protected\n    **/\n    p._tickNode = function(node) {\n        // TODO: call debug here\n    }\n\n    /**\n     * Callback when closing a node (called by BaseNode).\n     *\n     * @method _closeNode\n     * @param {Object} node The node that called this method.\n     * @protected\n    **/\n    p._closeNode = function(node) {\n        // TODO: call debug here\n        this._openNodes.pop();\n    }\n\n    /**\n     * Callback when exiting a node (called by BaseNode).\n     *\n     * @method _exitNode\n     * @param {Object} node The node that called this method.\n     * @protected\n    **/\n    p._exitNode = function(node) {\n        // TODO: call debug here\n    }\n\nb3.Tick = Tick;\n\n})();/**\n * BehaviorTree\n *\n * Copyright (c) 2014 Renato de Pontes Pereira.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to \n * deal in the Software without restriction, including without limitation the \n * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n * sell copies of the Software, and to permit persons to whom the Software is \n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING \n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n * IN THE SOFTWARE.\n**/\n\n/**\n * @module Behavior3JS\n **/\n\n// namespace:\n//this.b3 = this.b3 || {};\n\n(function() {\n\"use strict\";\n\n/**\n * The BehaviorTree class, as the name implies, represents the Behavior Tree \n * structure.\n * \n * There are two ways to construct a Behavior Tree: by manually setting the \n * root node, or by loading it from a data structure (which can be loaded from \n * a JSON). Both methods are shown in the examples below and better explained \n * in the user guide.\n *\n * The tick method must be called periodically, in order to send the tick \n * signal to all nodes in the tree, starting from the root. The method \n * `BehaviorTree.tick` receives a target object and a blackboard as parameters.\n * The target object can be anything: a game agent, a system, a DOM object, \n * etc. This target is not used by any piece of Behavior3JS, i.e., the target\n * object will only be used by custom nodes.\n * \n * The blackboard is obligatory and must be an instance of `Blackboard`. This \n * requirement is necessary due to the fact that neither `BehaviorTree` or any \n * node will store the execution variables in its own object (e.g., the BT does\n * not store the target, information about opened nodes or number of times the \n * tree was called). But because of this, you only need a single tree instance \n * to control multiple (maybe hundreds) objects.\n * \n * Manual construction of a Behavior Tree\n * --------------------------------------\n * \n *     var tree = new b3.BehaviorTree();\n *  \n *     tree.root = new b3.Sequence({children:[\n *         new b3.Priority({children:[\n *             new MyCustomNode(),\n *             new MyCustomNode()\n *         ]}),\n *         ...\n *     ]});\n *     \n * \n * Loading a Behavior Tree from data structure\n * -------------------------------------------\n * \n *     var tree = new b3.BehaviorTree();\n *\n *     tree.load({\n *         'title'       : 'Behavior Tree title'\n *         'description' : 'My description'\n *         'root'        : 'node-id-1'\n *         'nodes'       : {\n *             'node-id-1' : {\n *                 'name'        : 'Priority', // this is the node type\n *                 'title'       : 'Root Node', \n *                 'description' : 'Description', \n *                 'children'    : ['node-id-2', 'node-id-3'], \n *             },\n *             ...\n *         }\n *     })\n *     \n *\n * @class BehaviorTree\n**/\nvar BehaviorTree = b3.Class();\n\nvar p = BehaviorTree.prototype;\n\n    /**\n     * The tree id, must be unique. By default, created with `b3.createUUID`.\n     * \n     * @property id\n     * @type {String}\n     * @readOnly\n     */\n    \n    /**\n     * The tree title.\n     *\n     * @property title\n     * @type {String}\n     */\n    \n    /**\n     * Description of the tree.\n     *\n     * @property description\n     * @type {String}\n     */\n    \n    /**\n     * A dictionary with (key-value) properties. Useful to define custom \n     * variables in the visual editor.\n     *\n     * @property properties\n     * @type {Object}\n     */\n\n    /**\n     * The reference to the root node. Must be an instance of `b3.BaseNode`.\n     *\n     * @property root\n     * @type {BaseNode}\n     */\n\n    /**\n     * The reference to the debug instance.\n     *\n     * @property debug\n     * @type {Object}\n     */\n\n    /**\n     * Initialization method.\n     *\n     * @method initialize\n     * @constructor\n    **/\n    p.initialize = function() {\n        this.id          = b3.createUUID();\n        this.title       = 'The behavior tree';\n        this.description = 'Default description';\n        this.properties  = {};\n        this.root        = null;\n        this.debug       = null;\n    }\n\n    /**\n     * This method loads a Behavior Tree from a data structure, populating this\n     * object with the provided data. Notice that, the data structure must \n     * follow the format specified by Behavior3JS. Consult the guide to know \n     * more about this format.\n     *\n     * You probably want to use custom nodes in your BTs, thus, you need to \n     * provide the `names` object, in which this method can find the nodes by \n     * `names[NODE_NAME]`. This variable can be a namespace or a dictionary, \n     * as long as this method can find the node by its name, for example:\n     *\n     *     //json\n     *     ...\n     *     'node1': {\n     *       'name': MyCustomNode,\n     *       'title': ...\n     *     }\n     *     ...\n     *     \n     *     //code\n     *     var bt = new b3.BehaviorTree();\n     *     bt.load(data, {'MyCustomNode':MyCustomNode})\n     *     \n     * \n     * @method load\n     * @param {Object} data The data structure representing a Behavior Tree.\n     * @param {Object} [names] A namespace or dict containing custom nodes.\n    **/\n    p.load = function(data, names) {\n        names = names || {};\n\n        this.title       = data.title || this.title;\n        this.description = data.description || this.description;\n        this.properties  = data.properties || this.properties;\n\n        var nodes = {};\n        // Create the node list (without connection between them)\n        for (var id in data.nodes) {\n            var spec = data.nodes[id];\n\n            if (spec.name in names) {\n                // Look for the name in custom nodes\n                var cls = names[spec.name];\n            } else if (spec.name in b3) {\n                // Look for the name in default nodes\n                var cls = b3[spec.name];\n            } else {\n                // Invalid node name\n                throw EvalError('BehaviorTree.load: Invalid node name + \"'+\n                                 spec.name+'\".');\n            }\n\n            var node = new cls(spec.parameters);\n            node.id = spec.id || node.id;\n            node.title = spec.title || node.title;\n            node.description = spec.description || node.description;\n            node.properties = spec.properties || node.properties;\n            node.parameters = spec.parameters || node.parameters;\n\n            nodes[id] = node;\n        }\n\n        // Connect the nodes\n        for (var id in data.nodes) {\n            var spec = data.nodes[id];\n            var node = nodes[id];\n\n            if (node.category === b3.COMPOSITE && spec.children) {\n                for (var i=0; i<spec.children.length; i++) {\n                    var cid = spec.children[i];\n                    node.children.push(nodes[cid]);\n                }\n            } else if (node.category === b3.DECORATOR && spec.child) {\n                node.child = nodes[spec.child];\n            }\n        }\n\n        this.root = nodes[data.root];\n    };\n\n    /**\n     * This method dump the current BT into a data structure.\n     *\n     * Note: This method does not record the current node parameters. Thus, \n     * it may not be compatible with load for now.\n     * \n     * @method dump\n     * @returns {Object} A data object representing this tree.\n    **/\n    p.dump = function() {\n        var data = {};\n\n        data.title       = this.title;\n        data.description = this.description;\n        data.root        = (this.root)? this.root.id:null;\n        data.properties  = this.properties;\n        data.nodes       = {};\n\n        if (!this.root) return data;\n\n        var stack = [this.root];\n        while (stack.length > 0) {\n            var node = stack.pop();\n\n            var spec = {};\n            spec.id = node.id;\n            spec.name = node.name;\n            spec.title = node.title;\n            spec.description = node.description;\n            spec.properties = node.properties;\n            spec.parameters = node.parameters;\n            \n            if (node.category === b3.COMPOSITE && node.children) {\n                var children = []\n                for (var i=node.children.length-1; i>=0; i--) {\n                    children.push(node.children[i].id);\n                    stack.push(node.children[i]);\n                }\n                spec.children = children;\n            } else if (node.category === b3.DECORATOR && node.child) {\n                stack.push(node.child);\n                spec.child = node.child.id;\n            }\n\n            data.nodes[node.id] = spec;\n        }\n\n        return data;\n    };\n\n    /**\n     * Propagates the tick signal through the tree, starting from the root.\n     * \n     * This method receives a target object of any type (Object, Array, \n     * DOMElement, whatever) and a `Blackboard` instance. The target object has\n     * no use at all for all Behavior3JS components, but surely is important \n     * for custom nodes. The blackboard instance is used by the tree and nodes \n     * to store execution variables (e.g., last node running) and is obligatory\n     * to be a `Blackboard` instance (or an object with the same interface).\n     * \n     * Internally, this method creates a Tick object, which will store the \n     * target and the blackboard objects.\n     * \n     * Note: BehaviorTree stores a list of open nodes from last tick, if these \n     * nodes weren't called after the current tick, this method will close them \n     * automatically.\n     * \n     * @method tick\n     * @param {Object} target A target object.\n     * @param {Blackboard} blackboard An instance of blackboard object.\n     * @returns {Constant} The tick signal state.\n    **/\n    p.tick = function(target, blackboard) {\n        if (!blackboard) {\n            throw 'The blackboard parameter is obligatory and must be an ' +\n                  'instance of b3.Blackboard';\n        }\n\n        /* CREATE A TICK OBJECT */\n        var tick = new b3.Tick();\n        tick.debug      = this.debug;\n        tick.target     = target;\n        tick.blackboard = blackboard;\n        tick.tree       = this;\n\n        /* TICK NODE */\n        var state = this.root._execute(tick);\n\n        /* CLOSE NODES FROM LAST TICK, IF NEEDED */\n        var lastOpenNodes = blackboard.get('openNodes', this.id);\n        var currOpenNodes = tick._openNodes.slice(0);\n\n        // does not close if it is still open in this tick\n        var start = 0;\n        for (var i=0; i<Math.min(lastOpenNodes.length, currOpenNodes.length); i++) {\n            start = i+1;\n            if (lastOpenNodes[i] !== currOpenNodes[i]) {\n                break;\n            } \n        }\n\n        // close the nodes\n        for (var i=lastOpenNodes.length-1; i>=start; i--) {\n            lastOpenNodes[i]._close(tick);\n        }\n\n        /* POPULATE BLACKBOARD */\n        blackboard.set('openNodes', currOpenNodes, this.id);\n        blackboard.set('nodeCount', tick._nodeCount, this.id);\n\n        return state;\n    };\n   \n\nb3.BehaviorTree = BehaviorTree;\n\n})();/**\n * BaseNode\n *\n * Copyright (c) 2014 Renato de Pontes Pereira.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to \n * deal in the Software without restriction, including without limitation the \n * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n * sell copies of the Software, and to permit persons to whom the Software is \n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING \n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n * IN THE SOFTWARE.\n**/\n\n/**\n * @module Behavior3JS\n **/\n\n// namespace:\n//this.b3 = this.b3 || {};\n\n(function() {\n\"use strict\";\n\n/**\n * The BaseNode class is used as super class to all nodes in BehaviorJS. It \n * comprises all common variables and methods that a node must have to execute.\n *\n * **IMPORTANT:** Do not inherit from this class, use `b3.Composite`, \n * `b3.Decorator`, `b3.Action` or `b3.Condition`, instead.\n *\n * The attributes are specially designed to serialization of the node in a JSON\n * format. In special, the `parameters` attribute can be set into the visual \n * editor (thus, in the JSON file), and it will be used as parameter on the \n * node initialization at `BehaviorTree.load`.\n * \n * BaseNode also provide 5 callback methods, which the node implementations can\n * override. They are `enter`, `open`, `tick`, `close` and `exit`. See their \n * documentation to know more. These callbacks are called inside the `_execute`\n * method, which is called in the tree traversal.\n * \n * @class BaseNode\n**/\nvar BaseNode = b3.Class();\n\nvar p = BaseNode.prototype;\n\n    /**\n     * Node ID.\n     *\n     * @property id\n     * @type {String}\n     * @readonly\n    **/\n\n    /**\n     * Node name. Must be a unique identifier, preferable the same name of the \n     * class. You have to set the node name in the prototype.\n     *\n     * @property name\n     * @type {String}\n     * @readonly\n    **/\n    p.name = null;\n\n    /**\n     * Node category. Must be `b3.COMPOSITE`, `b3.DECORATOR`, `b3.ACTION` or \n     * `b3.CONDITION`. This is defined automatically be inheriting the \n     * correspondent class.\n     *\n     * @property category\n     * @type constant\n     * @readonly\n    **/\n    p.category = null;\n\n    /**\n     * Node title.\n     *\n     * @property title\n     * @type {String}\n     * @optional\n     * @readonly\n    **/\n    p.title = null;\n\n    /**\n     * Node description.\n     *\n     * @property description\n     * @type {String}\n     * @optional\n     * @readonly\n    **/\n    p.description = null;\n\n    /**\n     * A dictionary (key, value) describing the node parameters. Useful for \n     * defining parameter values in the visual editor. Note: this is only \n     * useful for nodes when loading trees from JSON files.\n     *\n     * @property parameters\n     * @type {Object}\n     * @readonly\n    **/\n    p.parameters = null;\n\n    /**\n     * A dictionary (key, value) describing the node properties. Useful for \n     * defining custom variables inside the visual editor.\n     *\n     * @property properties\n     * @type {Object}\n     * @readonly\n    **/\n    p.properties = null;\n\n    /**\n     * Initialization method.\n     *\n     * @method initialize\n     * @constructor\n    **/\n    p.initialize = function() {\n        this.id          = b3.createUUID();\n        this.title       = this.title || this.name;\n        this.description = '';\n        this.parameters  = {};\n        this.properties  = {};\n    }\n\n    /**\n     * This is the main method to propagate the tick signal to this node. This \n     * method calls all callbacks: `enter`, `open`, `tick`, `close`, and \n     * `exit`. It only opens a node if it is not already open. In the same \n     * way, this method only close a node if the node  returned a status \n     * different of `b3.RUNNING`.\n     *\n     * @method _execute\n     * @param {Tick} tick A tick instance.\n     * @returns {Constant} The tick state.\n     * @protected\n    **/\n    p._execute = function(tick) {\n        /* ENTER */\n        this._enter(tick);\n\n        /* OPEN */\n        if (!tick.blackboard.get('isOpen', tick.tree.id, this.id)) {\n            this._open(tick);\n        }\n\n        /* TICK */\n        var status = this._tick(tick);\n\n        /* CLOSE */\n        if (status !== b3.RUNNING) {\n            this._close(tick);\n        }\n\n        /* EXIT */\n        this._exit(tick);\n\n        return status;\n    }\n\n    /**\n     * Wrapper for enter method.\n     *\n     * @method _enter\n     * @param {Tick} tick A tick instance.\n     * @protected\n    **/\n    p._enter = function(tick) {\n        tick._enterNode(this);\n        this.enter(tick);\n    }\n\n    /**\n     * Wrapper for open method.\n     *\n     * @method _open\n     * @param {Tick} tick A tick instance.\n     * @protected\n    **/\n    p._open  = function(tick) {\n        tick._openNode(this);\n        tick.blackboard.set('isOpen', true, tick.tree.id, this.id);\n        this.open(tick);\n    }\n\n    /**\n     * Wrapper for tick method.\n     *\n     * @method _tick\n     * @param {Tick} tick A tick instance.\n     * @returns {Constant} A state constant.\n     * @protected\n    **/\n    p._tick  = function(tick) {\n        tick._tickNode(this);\n        return this.tick(tick);\n    }\n\n    /**\n     * Wrapper for close method.\n     *\n     * @method _close\n     * @param {Tick} tick A tick instance.\n     * @protected\n    **/\n    p._close = function(tick) {\n        tick._closeNode(this);\n        tick.blackboard.set('isOpen', false, tick.tree.id, this.id);\n        this.close(tick);\n    }\n\n    /**\n     * Wrapper for exit method.\n     *\n     * @method _exit\n     * @param {Tick} tick A tick instance.\n     * @protected\n    **/\n    p._exit  = function(tick) {\n        tick._exitNode(this);\n        this.exit(tick);\n    }\n\n    /**\n     * Enter method, override this to use. It is called every time a node is \n     * asked to execute, before the tick itself.\n     *\n     * @method enter\n     * @param {Tick} tick A tick instance.\n    **/\n    p.enter = function(tick) {}\n\n    /**\n     * Open method, override this to use. It is called only before the tick \n     * callback and only if the not isn't closed.\n     *\n     * Note: a node will be closed if it returned `b3.RUNNING` in the tick.\n     *\n     * @method open\n     * @param {Tick} tick A tick instance.\n    **/\n    p.open  = function(tick) {}\n\n    /**\n     * Tick method, override this to use. This method must contain the real \n     * execution of node (perform a task, call children, etc.). It is called\n     * every time a node is asked to execute.\n     *\n     * @method tick\n     * @param {Tick} tick A tick instance.\n    **/\n    p.tick  = function(tick) {}\n\n    /**\n     * Close method, override this to use. This method is called after the tick\n     * callback, and only if the tick return a state different from \n     * `b3.RUNNING`.\n     *\n     * @method close\n     * @param {Tick} tick A tick instance.\n    **/\n    p.close = function(tick) {}\n\n    /**\n     * Exit method, override this to use. Called every time in the end of the \n     * execution.\n     *\n     * @method exit\n     * @param {Tick} tick A tick instance.\n    **/\n    p.exit  = function(tick) {}\n    \nb3.BaseNode = BaseNode;\n\n})();/**\n * Action\n *\n * Copyright (c) 2014 Renato de Pontes Pereira.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to \n * deal in the Software without restriction, including without limitation the \n * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n * sell copies of the Software, and to permit persons to whom the Software is \n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING \n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n * IN THE SOFTWARE.\n**/\n\n/**\n * @module Behavior3JS\n **/\n\n// namespace:\n//this.b3 = this.b3 || {};\n\n(function() {\n\"use strict\";\n\n/**\n * Action is the base class for all action nodes. Thus, if you want to \n * create new custom action nodes, you need to inherit from this class. \n *\n * For example, take a look at the Runner action:\n * \n *     var Runner = b3.Class(b3.Action);\n *     var p = Runner.prototype;\n *     \n *         p.name = 'Runner';\n *     \n *         p.tick = function(tick) {\n *             return b3.RUNNING;\n *         }\n *\n * @class Action\n * @extends BaseNode\n**/\nvar Action = b3.Class(b3.BaseNode);\n\nvar p = Action.prototype;\n\n    /**\n     * Node category. Default to `b3.ACTION`.\n     *\n     * @property category\n     * @type {String}\n     * @readonly\n    **/\n    p.category = b3.ACTION;\n\n    p.__BaseNode_initialize = p.initialize;\n    /**\n     * Initialization method.\n     *\n     * @method initialize\n     * @constructor\n    **/\n    p.initialize = function() {\n        this.__BaseNode_initialize();\n    }\n\nb3.Action = Action;\n\n})();/**\n * Composite\n *\n * Copyright (c) 2014 Renato de Pontes Pereira.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to \n * deal in the Software without restriction, including without limitation the \n * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n * sell copies of the Software, and to permit persons to whom the Software is \n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING \n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n * IN THE SOFTWARE.\n**/\n\n/**\n * @module Behavior3JS\n **/\n\n// namespace:\n//this.b3 = this.b3 || {};\n\n(function() {\n\"use strict\";\n\n/**\n * Composite is the base class for all composite nodes. Thus, if you want to \n * create new custom composite nodes, you need to inherit from this class. \n * \n * When creating composite nodes, you will need to propagate the tick signal to\n * the children nodes manually. To do that, override the `tick` method and call \n * the `_execute` method on all nodes. For instance, take a look at how the \n * Sequence node inherit this class and how it call its children:\n *\n *\n *     // Inherit from Composite, using the util function Class.\n *     var Sequence = b3.Class(b3.Composite);\n *     var p = Sequence.prototype;\n *\n *         // Remember to set the name of the node. \n *         p.name = 'Sequence';\n *         \n *         // Override the tick function\n *         p.tick = function(tick) {\n *\n *             // Iterates over the children\n *             for (var i=0; i<this.children.length; i++) {\n *\n *                 // Propagate the tick\n *                 var status = this.children[i]._execute(tick);\n * \n *                 if (status !== b3.SUCCESS) {\n *                     return status;\n *                 }\n *             }\n *\n *             return b3.SUCCESS;\n *         }\n *\n * @class Composite\n * @extends BaseNode\n**/\nvar Composite = b3.Class(b3.BaseNode);\n\nvar p = Composite.prototype;\n\n    /**\n     * Node category. Default to `b3.COMPOSITE`.\n     *\n     * @property category\n     * @type {String}\n     * @readonly\n    **/\n    p.category = b3.COMPOSITE;\n\n    p.__BaseNode_initialize = p.initialize;\n    /**\n     * Initialization method.\n     *\n     * @method initialize\n     * @constructor\n    **/\n    p.initialize = function(settings) {\n        settings = settings || {};\n\n        this.__BaseNode_initialize();\n\n        this.children = (settings.children || []).slice(0);\n    };\n\nb3.Composite = Composite;\n\n})();/**\n * Decorator\n *\n * Copyright (c) 2014 Renato de Pontes Pereira.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to \n * deal in the Software without restriction, including without limitation the \n * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n * sell copies of the Software, and to permit persons to whom the Software is \n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING \n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n * IN THE SOFTWARE.\n**/\n\n/**\n * @module Behavior3JS\n **/\n\n// namespace:\n//this.b3 = this.b3 || {};\n\n(function() {\n\"use strict\";\n\n/**\n * Decorator is the base class for all decorator nodes. Thus, if you want to \n * create new custom decorator nodes, you need to inherit from this class. \n * \n * When creating decorator nodes, you will need to propagate the tick signal to\n * the child node manually, just like the composite nodes. To do that, override\n * the `tick` method and call the `_execute` method on the child node. For \n * instance, take a look at how the Inverter node inherit this class and how it\n * call its children:\n *\n *\n *     // Inherit from Decorator, using the util function Class.\n *     var Inverter = b3.Class(b3.Decorator);\n *     var p = Inverter.prototype;\n *     \n *         // Remember to set the name of the node. \n *         p.name = 'Inverter';\n *     \n *         // Override the tick function\n *         p.tick = function(tick) {\n *             if (!this.child) {\n *                 return b3.ERROR;\n *             }\n *     \n *             // Propagate the tick\n *             var status = this.child._execute(tick);\n *     \n *             if (status == b3.SUCCESS)\n *                 status = b3.FAILURE;\n *             else if (status == b3.FAILURE)\n *                 status = b3.SUCCESS;\n *     \n *             return status;\n *         };\n *\n * @class Decorator\n * @extends BaseNode\n**/\nvar Decorator = b3.Class(b3.BaseNode);\n\nvar p = Decorator.prototype;\n\n    /**\n     * Node category. Default to b3.DECORATOR.\n     *\n     * @property category\n     * @type {String}\n     * @readonly\n    **/\n    p.category = b3.DECORATOR;\n\n    p.__BaseNode_initialize = p.initialize;\n    /**\n     * Initialization method.\n     *\n     * @method initialize\n     * @constructor\n    **/\n    p.initialize = function(settings) {\n        settings = settings || {};\n\n        this.__BaseNode_initialize();\n\n        this.child = settings.child || null;\n    };\n\nb3.Decorator = Decorator;\n\n})();/**\n * Condition\n *\n * Copyright (c) 2014 Renato de Pontes Pereira.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to \n * deal in the Software without restriction, including without limitation the \n * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n * sell copies of the Software, and to permit persons to whom the Software is \n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING \n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n * IN THE SOFTWARE.\n**/\n\n/**\n * @module Behavior3JS\n **/\n\n// namespace:\n//this.b3 = this.b3 || {};\n\n(function() {\n\"use strict\";\n\n/**\n * Condition is the base class for all condition nodes. Thus, if you want to \n * create new custom condition nodes, you need to inherit from this class. \n *\n * @class Condition\n * @extends BaseNode\n**/\nvar Condition = b3.Class(b3.BaseNode);\n\nvar p = Condition.prototype;\n\n    /**\n     * Node category. Default to `b3.CONDITION`.\n     *\n     * @property category\n     * @type {String}\n     * @readonly\n    **/\n    p.category = b3.CONDITION;\n\n    p.__BaseNode_initialize = p.initialize;\n    /**\n     * Initialization method.\n     *\n     * @method initialize\n     * @constructor\n    **/\n    p.initialize = function() {\n        this.__BaseNode_initialize();\n    }\n\nb3.Condition = Condition;\n\n})();/**\n * Sequence\n *\n * Copyright (c) 2014 Renato de Pontes Pereira.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to \n * deal in the Software without restriction, including without limitation the \n * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n * sell copies of the Software, and to permit persons to whom the Software is \n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING \n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n * IN THE SOFTWARE.\n**/\n\n/**\n * @module Behavior3JS\n **/\n\n// namespace:\n//this.b3 = this.b3 || {};\n\n(function() {\n\"use strict\";\n\n/**\n * The Sequence node ticks its children sequentially until one of them returns \n * `FAILURE`, `RUNNING` or `ERROR`. If all children return the success state, \n * the sequence also returns `SUCCESS`.\n *\n * @class Sequence\n * @extends Composite\n**/\nvar Sequence = b3.Class(b3.Composite);\n\nvar p = Sequence.prototype;\n\n    /**\n     * Node name. Default to `Sequence`.\n     *\n     * @property name\n     * @type {String}\n     * @readonly\n    **/\n    p.name = 'Sequence';\n\n    /**\n     * Tick method.\n     *\n     * @method tick\n     * @param {b3.Tick} tick A tick instance.\n     * @returns {Constant} A state constant.\n    **/\n    p.tick = function(tick) {\n        for (var i=0; i<this.children.length; i++) {\n            var status = this.children[i]._execute(tick);\n\n            if (status !== b3.SUCCESS) {\n                return status;\n            }\n        }\n\n        return b3.SUCCESS;\n    }\n\nb3.Sequence = Sequence;\n\n})();/**\n * Priority\n *\n * Copyright (c) 2014 Renato de Pontes Pereira.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to \n * deal in the Software without restriction, including without limitation the \n * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n * sell copies of the Software, and to permit persons to whom the Software is \n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING \n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n * IN THE SOFTWARE.\n**/\n\n/**\n * @module Behavior3JS\n **/\n\n// namespace:\n//this.b3 = this.b3 || {};\n\n(function() {\n\"use strict\";\n\n/**\n * Priority ticks its children sequentially until one of them returns \n * `SUCCESS`, `RUNNING` or `ERROR`. If all children return the failure state, \n * the priority also returns `FAILURE`.\n *\n * @class Priority\n * @extends Composite\n**/\nvar Priority = b3.Class(b3.Composite);\n\nvar p = Priority.prototype\n\n    /**\n     * Node name. Default to `Priority`.\n     *\n     * @property name\n     * @type String\n     * @readonly\n    **/\n    p.name = 'Priority';\n\n    /**\n     * Tick method.\n     *\n     * @method tick\n     * @param {Tick} tick A tick instance.\n     * @returns {Constant} A state constant.\n    **/\n    p.tick = function(tick) {\n        for (var i=0; i<this.children.length; i++) {\n            var status = this.children[i]._execute(tick);\n\n            if (status !== b3.FAILURE) {\n                return status;\n            }\n        }\n\n        return b3.FAILURE;\n    }\n\nb3.Priority = Priority;\n\n})();/**\n * MemSequence\n *\n * Copyright (c) 2014 Renato de Pontes Pereira.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to \n * deal in the Software without restriction, including without limitation the \n * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n * sell copies of the Software, and to permit persons to whom the Software is \n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING \n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n * IN THE SOFTWARE.\n**/\n\n/**\n * @module Behavior3JS\n **/\n\n// namespace:\n//this.b3 = this.b3 || {};\n\n(function() {\n\"use strict\";\n\n/**\n * MemSequence is similar to Sequence node, but when a child returns a \n * `RUNNING` state, its index is recorded and in the next tick the MemPriority \n * call the child recorded directly, without calling previous children again.\n *\n * @class MemPriority\n * @extends Composite\n**/\nvar MemSequence = b3.Class(b3.Composite);\n\nvar p = MemSequence.prototype\n\n    /**\n     * Node name. Default to `MemSequence`.\n     *\n     * @property name\n     * @type {String}\n     * @readonly\n    **/\n    p.name = 'MemSequence';\n\n    /**\n     * Open method.\n     *\n     * @method open\n     * @param {b3.Tick} tick A tick instance.\n    **/\n    p.open = function(tick) {\n        tick.blackboard.set('runningChild', 0, tick.tree.id, this.id);\n    }\n\n    /**\n     * Tick method.\n     *\n     * @method tick\n     * @param {b3.Tick} tick A tick instance.\n     * @returns {Constant} A state constant.\n    **/\n    p.tick = function(tick) {\n        var child = tick.blackboard.get('runningChild', tick.tree.id, this.id);\n        for (var i=child; i<this.children.length; i++) {\n            var status = this.children[i]._execute(tick);\n\n            if (status !== b3.SUCCESS) {\n                if (status === b3.RUNNING) {\n                    tick.blackboard.set('runningChild', i, tick.tree.id, this.id);\n                }\n                return status;\n            }\n        }\n\n        return b3.SUCCESS;\n    }\n\nb3.MemSequence = MemSequence;\n\n})();/**\n * MemPriority\n *\n * Copyright (c) 2014 Renato de Pontes Pereira.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to \n * deal in the Software without restriction, including without limitation the \n * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n * sell copies of the Software, and to permit persons to whom the Software is \n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING \n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n * IN THE SOFTWARE.\n**/\n\n/**\n * @module Behavior3JS\n **/\n\n// namespace:\n//this.b3 = this.b3 || {};\n\n(function() {\n\"use strict\";\n\n/**\n * MemPriority is similar to Priority node, but when a child returns a \n * `RUNNING` state, its index is recorded and in the next tick the, MemPriority \n * calls the child recorded directly, without calling previous children again.\n *\n * @class MemPriority\n * @extends Composite\n**/\nvar MemPriority = b3.Class(b3.Composite);\n\nvar p = MemPriority.prototype;\n\n    /**\n     * Node name. Default to `MemPriority`.\n     *\n     * @property name\n     * @type {String}\n     * @readonly\n    **/\n    p.name = 'MemPriority';\n\n    /**\n     * Open method.\n     *\n     * @method open\n     * @param {b3.Tick} tick A tick instance.\n    **/\n    p.open = function(tick) {\n        tick.blackboard.set('runningChild', 0, tick.tree.id, this.id);\n    }\n\n    /**\n     * Tick method.\n     *\n     * @method tick\n     * @param {b3.Tick} tick A tick instance.\n     * @returns {Constant} A state constant.\n    **/\n    p.tick = function(tick) {\n        var child = tick.blackboard.get('runningChild', tick.tree.id, this.id);\n        for (var i=child; i<this.children.length; i++) {\n            var status = this.children[i]._execute(tick);\n\n            if (status !== b3.FAILURE) {\n                if (status === b3.RUNNING) {\n                    tick.blackboard.set('runningChild', i, tick.tree.id, this.id);\n                }\n                return status;\n            }\n        }\n\n        return b3.FAILURE;\n    }\n\nb3.MemPriority = MemPriority;\n\n})();/**\n * Inverter\n *\n * Copyright (c) 2014 Renato de Pontes Pereira.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to \n * deal in the Software without restriction, including without limitation the \n * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n * sell copies of the Software, and to permit persons to whom the Software is \n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING \n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n * IN THE SOFTWARE.\n**/\n\n/**\n * @module Behavior3JS\n **/\n\n// namespace:\n//this.b3 = this.b3 || {};\n\n(function() {\n\"use strict\";\n\n/**\n * The Inverter decorator inverts the result of the child, returning `SUCCESS`\n * for `FAILURE` and `FAILURE` for `SUCCESS`.\n *\n * @class Inverter\n * @extends Decorator\n**/\nvar Inverter = b3.Class(b3.Decorator);\n\nvar p = Inverter.prototype;\n\n    /**\n     * Node name. Default to `Inverter`.\n     *\n     * @property name\n     * @type {String}\n     * @readonly\n    **/\n    p.name = 'Inverter';\n\n    /**\n     * Tick method.\n     *\n     * @method tick\n     * @param {Tick} tick A tick instance.\n     * @returns {Constant} A state constant.\n    **/\n    p.tick = function(tick) {\n        if (!this.child) {\n            return b3.ERROR;\n        }\n\n        var status = this.child._execute(tick);\n\n        if (status == b3.SUCCESS)\n            status = b3.FAILURE;\n        else if (status == b3.FAILURE)\n            status = b3.SUCCESS;\n\n        return status;\n    };\n\nb3.Inverter = Inverter;\n\n})();/**\n * Limiter\n *\n * Copyright (c) 2014 Renato de Pontes Pereira.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to \n * deal in the Software without restriction, including without limitation the \n * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n * sell copies of the Software, and to permit persons to whom the Software is \n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING \n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n * IN THE SOFTWARE.\n**/\n\n/**\n * @module Behavior3JS\n **/\n\n// namespace:\n//this.b3 = this.b3 || {};\n\n(function() {\n\"use strict\";\n\n/**\n * This decorator limit the number of times its child can be called. After a\n * certain number of times, the Limiter decorator returns `FAILURE` without \n * executing the child.\n *\n * @class Limiter\n * @extends Decorator\n**/\nvar Limiter = b3.Class(b3.Decorator);\n\nvar p = Limiter.prototype;\n\n    /**\n     * Node name. Default to `Limiter`.\n     *\n     * @property name\n     * @type {String}\n     * @readonly\n    **/\n    p.name = 'Limiter';\n\n    /**\n     * Node parameters.\n     *\n     * @property parameters\n     * @type {String}\n     * @readonly\n    **/\n    p.parameters = {'maxLoop': null};\n    \n    p.__Decorator_initialize = p.initialize;\n    /**\n     * Initialization method. \n     *\n     * Settings parameters:\n     *\n     * - **maxLoop** (*Integer*) Maximum number of repetitions.\n     * - **child** (*BaseNode*) The child node.\n     *\n     * @method initialize\n     * @param {Object} settings Object with parameters.\n     * @constructor\n    **/\n    p.initialize = function(settings) {\n        settings = settings || {};\n\n        this.__Decorator_initialize(settings);\n\n        if (!settings.maxLoop) {\n            throw \"maxLoop parameter in Limiter decorator is an obligatory \" +\n                  \"parameter\";\n        }\n\n        this.maxLoop = settings.maxLoop;\n    }\n\n    /**\n     * Open method.\n     *\n     * @method open\n     * @param {Tick} tick A tick instance.\n    **/\n    p.open = function(tick) {\n        //[20170319]# 修复limiter因为返回success或failure而重置i\n        var i = tick.blackboard.get('i',tick.tree.id, this.id);\n        if(!i){\n            tick.blackboard.set('i', 0, tick.tree.id, this.id);\n        }\n    }\n\n    /**\n     * Tick method.\n     *\n     * @method tick\n     * @param {Tick} tick A tick instance.\n     * @returns {Constant} A state constant.\n    **/\n    p.tick = function(tick) {\n        if (!this.child) {\n            return b3.ERROR;\n        }\n\n        var i = tick.blackboard.get('i', tick.tree.id, this.id);\n\n        if (i < this.maxLoop) {\n            var status = this.child._execute(tick);\n\n            if (status == b3.SUCCESS || status == b3.FAILURE)\n                tick.blackboard.set('i', i+1, tick.tree.id, this.id);\n            \n            return status;\n        }\n\n        return b3.FAILURE;        \n    }\n\nb3.Limiter = Limiter;\n\n})();/**\n * MaxTime\n *\n * Copyright (c) 2014 Renato de Pontes Pereira.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to \n * deal in the Software without restriction, including without limitation the \n * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n * sell copies of the Software, and to permit persons to whom the Software is \n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING \n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n * IN THE SOFTWARE.\n**/\n\n/**\n * @module Behavior3JS\n **/\n\n// namespace:\n//this.b3 = this.b3 || {};\n\n(function() {\n\"use strict\";\n\n/**\n * The MaxTime decorator limits the maximum time the node child can execute. \n * Notice that it does not interrupt the execution itself (i.e., the child must\n * be non-preemptive), it only interrupts the node after a `RUNNING` status.\n *\n * @class MaxTime\n * @extends Decorator\n**/\nvar MaxTime = b3.Class(b3.Decorator);\n\nvar p = MaxTime.prototype;\n\n    /**\n     * Node name. Default to `MaxTime`.\n     *\n     * @property name\n     * @type {String}\n     * @readonly\n    **/\n    p.name = 'MaxTime';\n\n    /**\n     * Node title. Default to `Max Time`.\n     *\n     * @property title\n     * @type {String}\n     * @readonly\n    **/\n    p.title = 'Max Time';\n\n    /**\n     * Node parameters.\n     *\n     * @property parameters\n     * @type {String}\n     * @readonly\n    **/\n    p.parameters = {'maxTime': null};\n\n    p.__Decorator_initialize = p.initialize;\n    /**\n     * Initialization method.\n     *\n     * Settings parameters:\n     *\n     * - **maxTime** (*Integer*) Maximum time a child can execute.\n     * - **child** (*BaseNode*) The child node.\n     *\n     * @method initialize\n     * @param {Object} settings Object with parameters.\n     * @constructor\n    **/\n    p.initialize = function(settings) {\n        settings = settings || {};\n\n        this.__Decorator_initialize(settings);\n\n        if (!settings.maxTime) {\n            throw \"maxTime parameter in MaxTime decorator is an obligatory \" +\n                  \"parameter\";\n        }\n\n        this.maxTime = settings.maxTime;\n    };\n\n    /**\n     * Open method.\n     *\n     * @method open\n     * @param {Tick} tick A tick instance.\n    **/\n    p.open = function(tick) {\n        var startTime = (new Date()).getTime();\n        tick.blackboard.set('startTime', startTime, tick.tree.id, this.id);\n    };\n    \n    /**\n     * Tick method.\n     *\n     * @method tick\n     * @param {Tick} tick A tick instance.\n     * @returns {Constant} A state constant.\n    **/\n    p.tick = function(tick) {\n        if (!this.child) {\n            return b3.ERROR;\n        }\n        \n        var currTime = (new Date()).getTime();\n        var startTime = tick.blackboard.get('startTime', tick.tree.id, this.id);\n        \n        var status = this.child._execute(tick);\n        if (currTime - startTime > this.maxTime) {\n            return b3.FAILURE;\n        }\n        \n        return status;\n    };\n\nb3.MaxTime = MaxTime;\n\n})();/**\n * Repeater\n *\n * Copyright (c) 2014 Renato de Pontes Pereira.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to \n * deal in the Software without restriction, including without limitation the \n * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n * sell copies of the Software, and to permit persons to whom the Software is \n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING \n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n * IN THE SOFTWARE.\n**/\n\n/**\n * @module Behavior3JS\n **/\n\n// namespace:\n//this.b3 = this.b3 || {};\n\n(function() {\n\"use strict\";\n\n/**\n * Repeater is a decorator that repeats the tick signal until the child node \n * return `RUNNING` or `ERROR`. Optionally, a maximum number of repetitions \n * can be defined.\n *\n * @class Repeater\n * @extends Decorator\n**/\nvar Repeater = b3.Class(b3.Decorator);\n\nvar p = Repeater.prototype;\n\n    /**\n     * Node name. Default to `Repeater`.\n     *\n     * @property name\n     * @type {String}\n     * @readonly\n    **/\n    p.name = 'Repeater';\n\n    /**\n     * Node parameters.\n     *\n     * @property parameters\n     * @type {String}\n     * @readonly\n    **/\n    p.parameters = {'maxLoop': -1};\n\n    p.__Decorator_initialize = p.initialize;\n    /**\n     * Initialization method.\n     *\n     * Settings parameters:\n     *\n     * - **maxLoop** (*Integer*) Maximum number of repetitions. Default to -1 \n     *                           (infinite).\n     * - **child** (*BaseNode*) The child node.\n     * \n     * @method initialize\n     * @param {Object} settings Object with parameters.\n     * @constructor\n    **/\n    p.initialize = function(settings) {\n        settings = settings || {};\n\n        this.__Decorator_initialize(settings);\n\n        this.maxLoop = settings.maxLoop || -1;\n    };\n\n    /**\n     * Open method.\n     *\n     * @method open\n     * @param {Tick} tick A tick instance.\n    **/\n    p.open = function(tick) {\n        tick.blackboard.set('i', 0, tick.tree.id, this.id);\n    };\n\n    /**\n     * Tick method.\n     *\n     * @method tick\n     * @param {Tick} tick A tick instance.\n    **/\n    p.tick = function(tick) {\n        if (!this.child) {\n            return b3.ERROR;\n        }\n\n        var i = tick.blackboard.get('i', tick.tree.id, this.id);\n        var status = b3.SUCCESS;\n\n        while (this.maxLoop < 0 || i < this.maxLoop) {\n            status = this.child._execute(tick);\n\n            if (status == b3.SUCCESS || status == b3.FAILURE)\n                i++;\n            else\n                break;\n        }\n\n        i = tick.blackboard.set('i', i, tick.tree.id, this.id);\n        return status;\n    };\n\nb3.Repeater = Repeater;\n\n})();/**\n * RepeatUntilFailure\n *\n * Copyright (c) 2014 Renato de Pontes Pereira.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to \n * deal in the Software without restriction, including without limitation the \n * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n * sell copies of the Software, and to permit persons to whom the Software is \n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING \n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n * IN THE SOFTWARE.\n**/\n\n/**\n * @module Behavior3JS\n **/\n\n// namespace:\n//this.b3 = this.b3 || {};\n\n(function() {\n\"use strict\";\n\n/**\n * RepeatUntilFailure is a decorator that repeats the tick signal until the \n * node child returns `FAILURE`, `RUNNING` or `ERROR`. Optionally, a maximum \n * number of repetitions can be defined.\n *\n * @class RepeatUntilFailure\n * @extends Decorator\n**/\nvar RepeatUntilFailure = b3.Class(b3.Decorator);\n\nvar p = RepeatUntilFailure.prototype;\n\n    /**\n     * Node name. Default to `RepeatUntilFailure`.\n     *\n     * @property name\n     * @type {String}\n     * @readonly\n    **/\n    p.name = 'RepeatUntilFailure';\n\n    /**\n     * Node title. Default to `Repeat Until Failure`.\n     *\n     * @property title\n     * @type {String}\n     * @readonly\n    **/\n    p.title = 'Repeat Until Failure';\n\n    /**\n     * Node parameters.\n     *\n     * @property parameters\n     * @type {String}\n     * @readonly\n    **/\n    p.parameters = {'maxLoop': -1};\n\n    p.__Decorator_initialize = p.initialize;\n    /**\n     * Initialization method.\n     *\n     * Settings parameters:\n     *\n     * - **maxLoop** (*Integer*) Maximum number of repetitions. Default to -1 \n     *                           (infinite).\n     * - **child** (*BaseNode*) The child node.\n     *\n     * @method initialize\n     * @param {Object} settings Object with parameters.\n     * @constructor\n    **/\n    p.initialize = function(settings) {\n        settings = settings || {};\n\n        this.__Decorator_initialize(settings);\n\n        this.maxLoop = settings.maxLoop || -1;\n    }\n\n    /**\n     * Open method.\n     *\n     * @method open\n     * @param {Tick} tick A tick instance.\n    **/\n    p.open = function(tick) {\n        tick.blackboard.set('i', 0, tick.tree.id, this.id);\n    }\n\n    /**\n     * Tick method.\n     *\n     * @method tick\n     * @param {Tick} tick A tick instance.\n     * @returns {Constant} A state constant.\n    **/\n    p.tick = function(tick) {\n        if (!this.child) {\n            return b3.ERROR;\n        }\n\n        var i = tick.blackboard.get('i', tick.tree.id, this.id);\n\n        while (this.maxLoop < 0 || i < this.maxLoop) {\n            var status = this.child._execute(tick);\n\n            if (status == b3.SUCCESS)\n                i++;\n            else\n                break;\n        }\n\n        var i = tick.blackboard.set('i', i, tick.tree.id, this.id);\n        return status;\n    }\n\nb3.RepeatUntilFailure = RepeatUntilFailure;\n\n})();/**\n * RepeatUntilSuccess\n *\n * Copyright (c) 2014 Renato de Pontes Pereira.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to \n * deal in the Software without restriction, including without limitation the \n * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n * sell copies of the Software, and to permit persons to whom the Software is \n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING \n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n * IN THE SOFTWARE.\n**/\n\n/**\n * @module Behavior3JS\n **/\n\n// namespace:\n//this.b3 = this.b3 || {};\n\n(function() {\n\"use strict\";\n\n/**\n * RepeatUntilSuccess is a decorator that repeats the tick signal until the \n * node child returns `SUCCESS`, `RUNNING` or `ERROR`. Optionally, a maximum \n * number of repetitions can be defined.\n *\n * @class RepeatUntilSuccess\n * @extends Decorator\n**/\nvar RepeatUntilSuccess = b3.Class(b3.Decorator);\n\nvar p = RepeatUntilSuccess.prototype;\n\n    /**\n     * Node name. Default to `RepeatUntilSuccess`.\n     *\n     * @property name\n     * @type {String}\n     * @readonly\n    **/\n    p.name = 'RepeatUntilSuccess';\n\n    /**\n     * Node title. Default to `Repeat Until Success`.\n     *\n     * @property title\n     * @type {String}\n     * @readonly\n    **/\n    p.title = 'Repeat Until Success';\n    \n    /**\n     * Node parameters.\n     *\n     * @property parameters\n     * @type {String}\n     * @readonly\n    **/\n    p.parameters = {'maxLoop': -1};\n    \n    p.__Decorator_initialize = p.initialize;\n    /**\n     * Initialization method.\n     *\n     * Settings parameters:\n     *\n     * - **maxLoop** (*Integer*) Maximum number of repetitions. Default to -1 \n     *                           (infinite).\n     * - **child** (*BaseNode*) The child node.\n     *\n     * @method initialize\n     * @param {Object} settings Object with parameters.\n     * @constructor\n    **/\n    p.initialize = function(settings) {\n        settings = settings || {};\n\n        this.__Decorator_initialize(settings);\n\n        this.maxLoop = settings.maxLoop || -1;\n    }\n\n    /**\n     * Open method.\n     *\n     * @method open\n     * @param {Tick} tick A tick instance.\n    **/\n    p.open = function(tick) {\n        tick.blackboard.set('i', 0, tick.tree.id, this.id);\n    }\n\n    /**\n     * Tick method.\n     *\n     * @method tick\n     * @param {Tick} tick A tick instance.\n     * @returns {Constant} A state constant.\n    **/\n    p.tick = function(tick) {\n        if (!this.child) {\n            return b3.ERROR;\n        }\n\n        var i = tick.blackboard.get('i', tick.tree.id, this.id);\n\n        while (this.maxLoop < 0 || i < this.maxLoop) {\n            var status = this.child._execute(tick);\n\n            if (status == b3.FAILURE)\n                i++;\n            else\n                break;\n        }\n\n        var i = tick.blackboard.set('i', i, tick.tree.id, this.id);\n        return status;\n    }\n\nb3.RepeatUntilSuccess = RepeatUntilSuccess;\n\n})();/**\n * Error\n *\n * Copyright (c) 2014 Renato de Pontes Pereira.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to \n * deal in the Software without restriction, including without limitation the \n * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n * sell copies of the Software, and to permit persons to whom the Software is \n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING \n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n * IN THE SOFTWARE.\n**/\n\n/**\n * @module Behavior3JS\n **/\n\n// namespace:\n//this.b3 = this.b3 || {};\n\n(function() {\n\"use strict\";\n\n/**\n * This action node returns `ERROR` always.\n *\n * @class Error\n * @extends Action\n**/\nvar Error = b3.Class(b3.Action);\n\nvar p = Error.prototype;\n\n    /**\n     * Node name. Default to `Error`.\n     *\n     * @property name\n     * @type {String}\n     * @readonly\n    **/\n    p.name = 'Error';\n\n    /**\n     * Tick method.\n     *\n     * @method tick\n     * @param {b3.Tick} tick A tick instance.\n     * @returns {Constant} Always return `b3.ERROR`.\n    **/\n    p.tick = function(tick) {\n        return b3.ERROR;\n    }\n\nb3.Error = Error;\n\n})();/**\n * Failer\n *\n * Copyright (c) 2014 Renato de Pontes Pereira.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to \n * deal in the Software without restriction, including without limitation the \n * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n * sell copies of the Software, and to permit persons to whom the Software is \n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING \n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n * IN THE SOFTWARE.\n**/\n\n/**\n * @module Behavior3JS\n **/\n\n// namespace:\n//this.b3 = this.b3 || {};\n\n(function() {\n\"use strict\";\n\n/**\n * This action node returns `FAILURE` always.\n *\n * @class Failer\n * @extends Action\n**/\nvar Failer = b3.Class(b3.Action);\n\nvar p = Failer.prototype;\n\n    /**\n     * Node name. Default to `Failer`.\n     *\n     * @property name\n     * @type {String}\n     * @readonly\n    **/\n    p.name = 'Failer';\n\n    /**\n     * Tick method.\n     *\n     * @method tick\n     * @param {b3.Tick} tick A tick instance.\n     * @returns {Constant} Always return `b3.FAILURE`.\n    **/\n    p.tick = function(tick) {\n        return b3.FAILURE;\n    }\n\nb3.Failer = Failer;\n\n})();/**\n * Runner\n *\n * Copyright (c) 2014 Renato de Pontes Pereira.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to \n * deal in the Software without restriction, including without limitation the \n * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n * sell copies of the Software, and to permit persons to whom the Software is \n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING \n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n * IN THE SOFTWARE.\n**/\n\n/**\n * @module Behavior3JS\n **/\n\n// namespace:\n//this.b3 = this.b3 || {};\n\n(function() {\n\"use strict\";\n\n/**\n * This action node returns RUNNING always.\n *\n * @class Runner\n * @extends Action\n**/\nvar Runner = b3.Class(b3.Action);\n\nvar p = Runner.prototype;\n\n    /**\n     * Node name. Default to `Runner`.\n     *\n     * @property name\n     * @type {String}\n     * @readonly\n    **/\n    p.name = 'Runner';\n\n    /**\n     * Tick method.\n     *\n     * @method tick\n     * @param {b3.Tick} tick A tick instance.\n     * @returns {Constant} Always return `b3.RUNNING`.\n    **/\n    p.tick = function(tick) {\n        return b3.RUNNING;\n    }\n\nb3.Runner = Runner;\n\n})();/**\n * Succeeder\n *\n * Copyright (c) 2014 Renato de Pontes Pereira.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to \n * deal in the Software without restriction, including without limitation the \n * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n * sell copies of the Software, and to permit persons to whom the Software is \n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING \n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n * IN THE SOFTWARE.\n**/\n\n/**\n * @module Behavior3JS\n **/\n\n// namespace:\n//this.b3 = this.b3 || {};\n\n(function() {\n\"use strict\";\n\n/**\n * This action node returns `SUCCESS` always.\n *\n * @class Succeeder\n * @extends Action\n**/\nvar Succeeder = b3.Class(b3.Action);\n\nvar p = Succeeder.prototype;\n\n    /**\n     * Node name. Default to `Succeeder`.\n     *\n     * @property name\n     * @type String\n     * @readonly\n    **/\n    p.name = 'Succeeder';\n\n    /**\n     * Tick method.\n     *\n     * @method tick\n     * @param {b3.Tick} tick A tick instance.\n     * @returns {Constant} Always return `b3.SUCCESS`.\n    **/\n    p.tick = function(tick) {\n        return b3.SUCCESS;\n    }\n\nb3.Succeeder = Succeeder;\n\n})();/**\n * Wait\n *\n * Copyright (c) 2014 Renato de Pontes Pereira.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to \n * deal in the Software without restriction, including without limitation the \n * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n * sell copies of the Software, and to permit persons to whom the Software is \n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING \n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n * IN THE SOFTWARE.\n**/\n\n/**\n * @module Behavior3JS\n **/\n\n// namespace:\n//this.b3 = this.b3 || {};\n\n(function() {\n\"use strict\";\n\n/**\n * Wait a few seconds.\n *\n * @class Wait\n * @extends Action\n**/\nvar Wait = b3.Class(b3.Action);\n\nvar p = Wait.prototype;\n    \n    /**\n     * Node name. Default to `Wait`.\n     *\n     * @property name\n     * @type {String}\n     * @readonly\n    **/\n    p.name = 'Wait';\n\n    /**\n     * Node parameters.\n     *\n     * @property parameters\n     * @type {String}\n     * @readonly\n    **/\n    p.parameters = {'milliseconds': 0};\n\n    p.__Action_initialize = p.initialize;\n    /**\n     * Initialization method.\n     *\n     * Settings parameters:\n     *\n     * - **milliseconds** (*Integer*) Maximum time, in milliseconds, a child\n     *                                can execute.\n     *\n     * @method initialize\n     * @param {Object} settings Object with parameters.\n     * @constructor\n    **/\n    p.initialize = function(settings) {\n        settings = settings || {};\n\n        this.__Action_initialize();\n\n        this.endTime = settings.milliseconds || 0;\n    }\n\n    /**\n     * Open method.\n     *\n     * @method open\n     * @param {Tick} tick A tick instance.\n    **/\n    p.open = function(tick) {\n        var startTime = (new Date()).getTime();\n        tick.blackboard.set('startTime', startTime, tick.tree.id, this.id);\n    }\n\n    /**\n     * Tick method.\n     *\n     * @method tick\n     * @param {Tick} tick A tick instance.\n     * @returns {Constant} A state constant.\n    **/\n    p.tick = function(tick) {\n        var currTime = (new Date()).getTime();\n        var startTime = tick.blackboard.get('startTime', tick.tree.id, this.id);\n        \n        if (currTime - startTime > this.endTime) {\n            return b3.SUCCESS;\n        }\n        \n        return b3.RUNNING;\n    }\n\nb3.Wait = Wait;\n\n})();\n\nmodule.exports = b3;"]}