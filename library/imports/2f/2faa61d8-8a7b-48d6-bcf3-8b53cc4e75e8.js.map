{"version":3,"sources":["../../../../../../../assets/Scripts/src/behavior/core/assets/Scripts/src/behavior/core/Composite.ts"],"names":[],"mappings":";;;;;AAAA,uCAAkC;AAIlC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAsCI;AAEJ;IAAuC,6BAAQ;IAG7C;;;;;;;;OAQG;IACH,mBAAY,IAAiB;QAA7B,iBAQC;QAPC,IAAI,CAAC,QAAQ,GAAG,WAAW,CAAC,CAAC,eAAe;QAC5C,QAAA,kBAAM,IAAI,CAAC,SAAC;QACZ,IAAG,CAAC,IAAI,CAAC,QAAQ,EAAC;YAChB,KAAI,CAAC,QAAQ,GAAG,EAAE,CAAA;YAClB,OAAO;SACR;QACD,KAAI,CAAC,QAAQ,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;;IAC3C,CAAC;IAEH,gBAAC;AAAD,CAtBA,AAsBC,CAtBsC,kBAAQ,GAsB9C;;AAAA,CAAC","file":"","sourceRoot":"../../../../../../../assets/Scripts/src/behavior/core","sourcesContent":["import BaseNode from './BaseNode';\nimport {COMPOSITE} from '../constants';\nimport { BaseNodeData } from '../interf';\n\n/**\n * Composite is the base class for all composite nodes. Thus, if you want to\n * create new custom composite nodes, you need to inherit from this class.\n *\n * When creating composite nodes, you will need to propagate the tick signal\n * to the children nodes manually. To do that, override the `tick` method and\n * call the `_execute` method on all nodes. For instance, take a look at how\n * the Sequence node inherit this class and how it call its children:\n *\n *     // Inherit from Composite, using the util function Class.\n *     class Sequence extends Composite {\n *\n *       constructor(){\n *         // Remember to set the name of the node.\n *         super({name: 'Sequence'});\n *       }\n *\n *       // Override the tick function\n *       tick(tick) {\n *\n *         // Iterates over the children\n *         for (var i=0; i<this.children.length; i++) {\n *\n *           // Propagate the tick\n *           var status = this.children[i]._execute(tick);\n *\n *           if (status !== SUCCESS) {\n *               return status;\n *           }\n *         }\n *\n *         return SUCCESS;\n *       }\n *     };\n *\n * @module b3\n * @class Composite\n * @extends BaseNode\n **/\n\nexport default class Composite extends BaseNode {\n  public children: Array<BaseNode>;\n\n  /**\n   * Creates an instance of Composite.\n   * @param {Object} options \n   * @param {BaseNode[]} options.children \n   * @param {String} options.name Node name. Default to `Composite`.\n   * @param {String} options.title \n   * @param {Object} options.properties \n   * @memberof Composite\n   */\n  constructor(data:BaseNodeData) {\n    data.category = 'composite'; // COMPOSITE ||\n    super(data);\n    if(!data.children){\n      this.children = []\n      return;\n    }\n    this.children = (data.children).slice(0);\n  }\n\n};\n"]}