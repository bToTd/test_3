{"version":3,"sources":["../../../../../../../assets/Scripts/src/behavior/core/assets/Scripts/src/behavior/core/BaseNode.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"../../../../../../../assets/Scripts/src/behavior/core","sourcesContent":["import {createUUID} from '../b3.functions';\nimport {RUNNING} from '../constants';\nimport { BaseNodeData } from '../interf';\n\n/**\n * The BaseNode class is used as super class to all nodes in BehaviorJS. It\n * comprises all common variables and methods that a node must have to\n * execute.\n *\n * **IMPORTANT:** Do not inherit from this class, use `Composite`,\n * `Decorator`, `Action` or `Condition`, instead.\n *\n * The attributes are specially designed to serialization of the node in a\n * JSON format. In special, the `parameters` attribute can be set into the\n * visual editor (thus, in the JSON file), and it will be used as parameter\n * on the node initialization at `BehaviorTree.load`.\n *\n * BaseNode also provide 5 callback methods, which the node implementations\n * can override. They are `enter`, `open`, `tick`, `close` and `exit`. See\n * their documentation to know more. These callbacks are called inside the\n * `_execute` method, which is called in the tree traversal.\n *\n * @module b3\n * @class BaseNode\n **/\nexport default class BaseNode {\n  protected id:any;\n  protected category:any;\n  protected name:string;\n  protected title:string;\n  protected description:any;\n  protected properties:any;\n  public parameters:any;\n\n  /**\n   * Initialization method.\n   * @method initialize\n   * @constructor\n   **/\n  constructor(data:BaseNodeData) {\n    // @ts-ignore\n    this.id = createUUID();\n\n    /**\n     * Node category. Must be `COMPOSITE`, `DECORATOR`, `ACTION` or\n     * `CONDITION`. This is defined automatically be inheriting the\n     * correspondent class.\n     * \n     * @member BaseNode#category\n     **/\n    this.category = data.category || '';\n\n    /**\n     * Node name. Must be a unique identifier,\n     * preferable the same name of the\n     * class. You have to set the node name in the prototype.\n     * \n     * @member BaseNode#name\n     **/\n    this.name = name || '';\n\n    /**\n     * Node title.\n     * \n     * @optional\n     * @member BaseNode#title\n     **/\n    this.title = data.title || this.name;\n\n    /**\n     * Node description.\n     * \n     * @member BaseNode#description\n     */\n    this.description = data.description || '';\n\n    /**\n     * A dictionary (key, value) describing the node properties. Useful for\n     * defining custom variables inside the visual editor.\n     *\n     * @property properties\n     * @type {Object}\n     * @readonly\n     **/\n    this.properties = data.properties || {};\n\n    /**\n     * A dictionary (key, value) describing the node parameters. Useful for\n     * defining parameter values in the visual editor. Note: this is only\n     * useful for nodes when loading trees from JSON files.\n     *\n     * **Deprecated since 0.2.0. This is too similar to the properties\n     * attribute, thus, this attribute is deprecated in favor to\n     * `properties`.**\n     *\n     * @property {Object} parameters\n     * @deprecated since 0.2.0.\n     * @readonly\n     **/\n    this.parameters = {};\n  }\n\n  /**\n   * This is the main method to propagate the tick signal to this node. This\n   * method calls all callbacks: `enter`, `open`, `tick`, `close`, and\n   * `exit`. It only opens a node if it is not already open. In the same\n   * way, this method only close a node if the node  returned a status\n   * different of `RUNNING`.\n   *\n   * @method _execute\n   * @param {Tick} tick A tick instance.\n   * @return {Constant} The tick state.\n   * @protected\n   **/\n  _execute(tick) {\n    // ENTER\n    this._enter(tick);\n\n    // OPEN\n    if (!tick.blackboard.get('isOpen', tick.tree.id, this.id)) {\n      this._open(tick);\n    }\n\n    // TICK\n    var status = this._tick(tick);\n\n    // CLOSE\n    // @ts-ignore\n    if (status !== RUNNING) {\n      this._close(tick);\n    }\n\n    // EXIT\n    this._exit(tick);\n\n    return status;\n  }\n\n  /**\n   * Wrapper for enter method.\n   * @method _enter\n   * @param {Tick} tick A tick instance.\n   * @protected\n   **/\n  _enter(tick) {\n    tick._enterNode(this);\n    this.enter(tick);\n  }\n\n  /**\n   * Wrapper for open method.\n   * @method _open\n   * @param {Tick} tick A tick instance.\n   * @protected\n   **/\n  _open(tick) {\n    tick._openNode(this);\n    tick.blackboard.set('isOpen', true, tick.tree.id, this.id);\n    this.open(tick);\n  }\n\n  /**\n   * Wrapper for tick method.\n   * @method _tick\n   * @param {Tick} tick A tick instance.\n   * @return {Constant} A state constant.\n   * @protected\n   **/\n  _tick(tick) {\n    tick._tickNode(this);\n    return this.tick(tick);\n  }\n\n  /**\n   * Wrapper for close method.\n   * @method _close\n   * @param {Tick} tick A tick instance.\n   * @protected\n   **/\n  _close(tick) {\n    tick._closeNode(this);\n    tick.blackboard.set('isOpen', false, tick.tree.id, this.id);\n    this.close(tick);\n  }\n\n  /**\n   * Wrapper for exit method.\n   * @method _exit\n   * @param {Tick} tick A tick instance.\n   * @protected\n   **/\n  _exit(tick) {\n    tick._exitNode(this);\n    this.exit(tick);\n  }\n\n  /**\n   * Enter method, override this to use. It is called every time a node is\n   * asked to execute, before the tick itself.\n   *\n   * @method enter\n   * @param {Tick} tick A tick instance.\n   **/\n  enter(tick) {}\n\n  /**\n   * Open method, override this to use. It is called only before the tick\n   * callback and only if the not isn't closed.\n   *\n   * Note: a node will be closed if it returned `RUNNING` in the tick.\n   *\n   * @method open\n   * @param {Tick} tick A tick instance.\n   **/\n  open(tick) {}\n\n  /**\n   * Tick method, override this to use. This method must contain the real\n   * execution of node (perform a task, call children, etc.). It is called\n   * every time a node is asked to execute.\n   *\n   * @method tick\n   * @param {Tick} tick A tick instance.\n   **/\n  tick(tick) {}\n\n  /**\n   * Close method, override this to use. This method is called after the tick\n   * callback, and only if the tick return a state different from\n   * `RUNNING`.\n   *\n   * @method close\n   * @param {Tick} tick A tick instance.\n   **/\n  close(tick) {}\n\n  /**\n   * Exit method, override this to use. Called every time in the end of the\n   * execution.\n   *\n   * @method exit\n   * @param {Tick} tick A tick instance.\n   **/\n  exit(tick) {}\n};\n"]}