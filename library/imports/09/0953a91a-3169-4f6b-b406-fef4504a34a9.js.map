{"version":3,"sources":["../../../../../../../assets/Scripts/src/behavior/core/assets/Scripts/src/behavior/core/Decorator.ts"],"names":[],"mappings":";;;;;AAAA,uCAAkC;AAIlC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAsCI;AAEJ;IAAuC,6BAAQ;IAG7C;;;;;;;OAOG;IACH,mBAAY,IAAiB;QAA7B,iBAIC;QAHC,IAAI,CAAC,QAAQ,GAAG,WAAW,CAAC,CAAC,YAAY;QACzC,QAAA,kBAAM,IAAI,CAAC,SAAC;QACZ,KAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;;IAC1B,CAAC;IAEH,gBAAC;AAAD,CAjBA,AAiBC,CAjBsC,kBAAQ,GAiB9C;;AAAA,CAAC","file":"","sourceRoot":"../../../../../../../assets/Scripts/src/behavior/core","sourcesContent":["import BaseNode from './BaseNode';\nimport {DECORATOR} from '../constants';\nimport { BaseNodeData } from '../interf';\n\n/**\n * Decorator is the base class for all decorator nodes. Thus, if you want to\n * create new custom decorator nodes, you need to inherit from this class.\n *\n * When creating decorator nodes, you will need to propagate the tick signal\n * to the child node manually, just like the composite nodes. To do that,\n * override the `tick` method and call the `_execute` method on the child\n * node. For instance, take a look at how the Inverter node inherit this\n * class and how it call its children:\n *\n *     // Inherit from Decorator, using the util function Class.\n *     class Inverter extends b3.Decorator {\n *       \n *       constructor(){\n *         super({name: 'Invereter'});\n *       }\n *\n *       tick: function(tick) {\n *         if (!this.child) {\n *           return b3.ERROR;\n *         }\n *\n *         // Propagate the tick\n *         var status = this.child._execute(tick);\n *\n *         if (status === b3.SUCCESS) {\n *           status = b3.FAILURE;\n *         } else if (status === b3.FAILURE) {\n *           status = b3.SUCCESS;\n *         }\n *\n *         return status;\n *       }\n *     });\n *\n * @module b3\n * @class Decorator\n * @extends BaseNode\n **/\n\nexport default class Decorator extends BaseNode {\n  public child: BaseNode;\n\n  /**\n   * Creates an instance of Decorator.\n   * @param {Object} options \n   * @param {String} options.name Node name. Default to `Decorator`.\n   * @param {String} options.title \n   * @param {Object} options.properties \n   * @memberof Decorator\n   */\n  constructor(data:BaseNodeData) {\n    data.category = 'decorator'; // DECORATOR\n    super(data);\n    this.child = data.child;\n  }\n\n};\n"]}