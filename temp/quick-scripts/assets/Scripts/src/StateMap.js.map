{"version":3,"sources":["StateMap.ts"],"names":[],"mappings":";;;;;AAEA;;;;;GAKG;AAEH;IAII,kBAAY,KAAmB;QAHvB,aAAQ,GAAG,EAAE,CAAC;QACd,UAAK,GAAgB,IAAI,CAAC;QAC1B,WAAM,GAAU,EAAE,CAAC;QAEvB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACvB,CAAC;IAEM,2BAAQ,GAAf;QACI,OAAO,IAAI,CAAC,KAAK,CAAC;IACtB,CAAC;IACM,uBAAI,GAAX,UAAY,GAAO;QACf,OAAO;QACP,IAAG,CAAC,CAAC,GAAG,CAAC,MAAM,IAAI,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,EAAC;YAChD,OAAO,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC;YAChC,OAAO;SACV;QACD,IAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,EAAC;YAC1B,WAAW;YACX,OAAO;SACV;QACD,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAC5B,CAAC;IACD;;;OAGG;IACI,yBAAM,GAAb,UAAe,GAAO;QAClB,IAAI,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QACvC,IAAG,KAAK,KAAK,CAAC,CAAC,EAAC;YACZ,iBAAiB;YACjB,OAAO;SACV;QACD,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;IAClC,CAAC;IACM,+BAAY,GAAnB;IAEA,CAAC;IACD;;;OAGG;IACK,sBAAG,GAAX,UAAa,UAAU;QACnB,KAAI,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,KAAK,EAAE,EAAC;YACrD,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,UAAU,CAAC,CAAC;SACtD;IACL,CAAC;IACL,eAAC;AAAD,CA/CA,AA+CC,IAAA","file":"","sourceRoot":"../../../../../assets/Scripts/src","sourcesContent":["import { StateManager } from \"./StateManager\";\n\n/**\n *@description: 集合使用某一类状态机的所有对象\n *@author: hwc bToTd \n *@date: 2019-08-28 18:19:34\n *@version \n */\n\nexport default class StateMap{\n    private objArray = [];\n    private state:StateManager = null;\n    private listen:string = '';\n    constructor(state?:StateManager){\n        this.state = state;\n    }\n    \n    public getState(){\n        return this.state;\n    }\n    public push(obj:any){\n        // 状态验证\n        if(!(obj._state && this.state.hasState(obj._state))){\n            console.log(\"状态类型不符合，无法进入当前容器\");\n            return;\n        }\n        if(this.objArray.indexOf(obj)){\n            // 注册对象不能重复\n            return;\n        }\n        this.objArray.push(obj);\n    }\n    /**\n     * 移除状态机集合中管理的对象\n     * @param obj \n     */\n    public remove (obj:any) {\n        let index = this.objArray.indexOf(obj);\n        if(index === -1){\n            // 没有这个元素，不需要执行操作\n            return;\n        }\n        this.objArray.slice(index, 1);\n    }\n    public appendListen(){\n\n    }\n    /**\n     * 状态机的跳转\n     * @param transition 转换条件\n     */\n    private run (transition) {\n        for(let index = 0; index < this.objArray.length; index++){\n            this.state.check(this.objArray[index], transition);\n        }\n    }\n}"]}