{"version":3,"sources":["StateManager.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"../../../../../assets/Scripts/src","sourcesContent":["/**\n *@description: 状态机的配置表，检查对象的状态转换\n *@author: hwc bToTd \n *@date: 2019-08-27 15:51:02\n *@version \n */\n\nexport interface State {\n    _state: string;\n}\n\nexport class StateManager{\n    private stateTransitionTable = {};      // 状态转移表\n    private state:Array<any> = [];          // 状态数组\n    private actions = {};                   // 状态对应的动作\n    constructor(){\n\n    };\n    /**\n     * 检查这个对象是否能够在当前输入的条件下的状态转移\n     * @param obj 绑定状态的对象\n     * @param transition 转换条件\n     */\n    public check(obj:any, transition:any){\n        if(!(obj._state && this.state.indexOf(obj._state))){\n            console.log(\"这个对象不是这个状态机\");\n            return;\n        }\n        let newState = this.stateTransitionTable[obj._state][transition];\n        if(!newState){\n            // 不存在跳转的状态\n            return\n        }\n        obj._state = newState;\n        let actions:Array<Function> = this.actions[newState];\n        for(let index = 0; index < actions.length; index++){\n            let action:Function = actions[index];\n            action.call(obj);\n        }\n    }\n\n    /**\n     * 注册状态所执行的动作\n     * @param state 状态\n     * @param atcion 状态动作\n     */\n    public registeredActionForState(state:any, atcion:Function){\n        if(!this.hasState(state)){\n            console.log(\"状态机没有这个状态，不能注册动作\");\n            return;\n        }\n        if(!this.actions[state] || this.actions[state].length === 'undefined'){\n            this.actions[state] = [];\n        }\n        this.actions[state].push(atcion);\n    }\n\n    /**\n     * 判断状态机是否存在输入的状态\n     * @param state \n     */\n    public hasState(state:any){\n        return this.state.indexOf(state);\n    }\n\n    /**\n     * 根据 JSON 数据加载状态机\n     * @param stateJson \n     */\n    public loadStateFromJosn(stateJson:any){\n        if(!stateJson){\n            console.log(\"数据为空\");\n            return;\n        }\n        if(typeof stateJson === \"string\"){\n            stateJson = JSON.parse(stateJson);\n        }\n        let tem_state = stateJson.state;\n        let tem_trans = stateJson.translations;\n        // 生成状态数组\n        let stateKeys = Object.keys(tem_state);\n        for(let keyIndex = 0; keyIndex < stateKeys.length; keyIndex++){\n            this.state[keyIndex] = tem_state[stateKeys[keyIndex]];\n        }\n        // 拼接状态转换表\n        for(let index = 0; index < tem_trans.length; index++){\n            let translation = tem_trans[index];\n            if(!this.stateTransitionTable[translation[\"from\"]]){\n                this.stateTransitionTable[translation[\"from\"]] = {};\n            }\n            this.stateTransitionTable[translation[\"from\"]][translation[\"translation\"]] = translation[\"to\"];\n        }\n    }\n}"]}