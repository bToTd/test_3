{"version":3,"sources":["Limiter.ts"],"names":[],"mappings":";;;;;AAAA,+CAA0C;AAC1C,0CAAqD;AAIrD;;;;;;;;IAQI;AAEJ;IAAqC,2BAAS;IAG5C;;;;;;;;;;;;OAYG;IACH,iBAAY,OAAc,EAAE,KAAe;QAA3C,iBAaC;QAZC,IAAI,IAAI,GAAgB;YACtB,IAAI,EAAE,SAAS;YACf,KAAK,EAAE,6BAA6B;YACpC,UAAU,EAAE,EAAC,OAAO,EAAE,CAAC,EAAC;SACzB,CAAA;QACD,QAAA,kBAAM,IAAI,CAAC,SAAC;QAEZ,IAAI,CAAC,OAAO,EAAE;YACZ,MAAM,mEAAmE,CAAC;SAC3E;QAED,KAAI,CAAC,OAAO,GAAG,OAAO,CAAC;;IACzB,CAAC;IAED;;;;QAII;IACJ,sBAAI,GAAJ,UAAK,IAAI;QACP,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC;IACrD,CAAC;IAED;;;;;QAKI;IACJ,sBAAI,GAAJ,UAAK,IAAI;QACP,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE;YACf,OAAO,iBAAK,CAAC;SACd;QAED,IAAI,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC;QAExD,IAAI,CAAC,GAAG,IAAI,CAAC,OAAO,EAAE;YACpB,IAAI,MAAM,GAAO,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;YAE3C,IAAI,MAAM,IAAI,mBAAO,IAAI,MAAM,IAAI,mBAAO;gBACxC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAC,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC;YAEvD,OAAO,MAAM,CAAC;SACf;QAED,OAAO,mBAAO,CAAC;IACjB,CAAC;IACH,cAAC;AAAD,CAhEA,AAgEC,CAhEoC,mBAAS,GAgE7C;;AAAA,CAAC","file":"","sourceRoot":"../../../../../../../assets/Scripts/src/behavior/decorators","sourcesContent":["import Decorator from '../core/Decorator';\nimport {FAILURE, SUCCESS, ERROR} from '../constants';\nimport BaseNode from '../core/BaseNode';\nimport { BaseNodeData } from '../interf';\n\n/**\n * This decorator limit the number of times its child can be called. After a\n * certain number of times, the Limiter decorator returns `FAILURE` without\n * executing the child.\n *\n * @module b3\n * @class Limiter\n * @extends Decorator\n **/\n\nexport default class Limiter extends Decorator {\n  public maxLoop: any;\n\n  /**\n   * Creates an instance of Limiter.\n   * \n   * Settings parameters:\n   * \n   * - **maxLoop** (*Integer*) Maximum number of repetitions.\n   * - **child** (*BaseNode*) The child node.\n   * \n   * @param {Object} params\n   * @param {Number} params.maxLoop Maximum number of repetitions.\n   * @param {BaseNode} params.child The child node.\n   * @memberof Limiter\n   */\n  constructor(maxLoop:number, child?:BaseNode) {\n    let data:BaseNodeData = {\n      name: 'Limiter',\n      title: 'Limit <maxLoop> Activations',\n      properties: {maxLoop: 1},\n    }\n    super(data);\n\n    if (!maxLoop) {\n      throw 'maxLoop parameter in Limiter decorator is an obligatory parameter';\n    }\n    \n    this.maxLoop = maxLoop;\n  }\n\n  /**\n   * Open method.\n   * @method open\n   * @param {Tick} tick A tick instance.\n   **/\n  open(tick) {\n    tick.blackboard.set('i', 0, tick.tree.id, this.id);\n  }\n\n  /**\n   * Tick method.\n   * @method tick\n   * @param {Tick} tick A tick instance.\n   * @return {Constant} A state constant.\n   **/\n  tick(tick) {\n    if (!this.child) {\n      return ERROR;\n    }\n\n    var i = tick.blackboard.get('i', tick.tree.id, this.id);\n\n    if (i < this.maxLoop) {\n      var status:any = this.child._execute(tick);\n\n      if (status == SUCCESS || status == FAILURE)\n        tick.blackboard.set('i', i+1, tick.tree.id, this.id);\n\n      return status;\n    }\n\n    return FAILURE;\n  }\n};\n"]}