{"version":3,"sources":["RepeatUntilSuccess.ts"],"names":[],"mappings":";;;;;AAAA,+CAA0C;AAC1C,0CAAqD;AAIrD;;;;;;;;IAQI;AAEJ;IAAgD,sCAAS;IAGvD;;;;;;;;;;QAUI;IACJ,4BAAY,OAAY,EAAE,KAAe;QAA7B,wBAAA,EAAA,WAAW,CAAC;QAAxB,iBASC;QARC,IAAI,IAAI,GAAgB;YACtB,IAAI,EAAE,oBAAoB;YAC1B,KAAK,EAAE,sBAAsB;YAC7B,UAAU,EAAE,EAAC,OAAO,EAAE,CAAC,CAAC,EAAC;SAC1B,CAAA;QACD,QAAA,kBAAM,IAAI,CAAC,SAAC;QAEZ,KAAI,CAAC,OAAO,GAAG,OAAO,CAAC;;IACzB,CAAC;IAED;;;;QAII;IACJ,iCAAI,GAAJ,UAAK,IAAI;QACP,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC;IACrD,CAAC;IAED;;;;;QAKI;IACJ,iCAAI,GAAJ,UAAK,IAAI;QACP,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE;YACf,OAAO,iBAAK,CAAC;SACd;QAED,IAAI,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC;QACxD,IAAI,MAAM,GAAG,iBAAK,CAAC;QAEnB,OAAO,IAAI,CAAC,OAAO,GAAG,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,OAAO,EAAE;YAC3C,aAAa;YACb,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;YAEnC,IAAI,MAAM,IAAI,mBAAO,EAAE;gBACrB,CAAC,EAAE,CAAC;aACL;iBAAM;gBACL,MAAM;aACP;SACF;QAED,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC;QACvD,OAAO,MAAM,CAAC;IAChB,CAAC;IACH,yBAAC;AAAD,CA9DA,AA8DC,CA9D+C,mBAAS,GA8DxD;;AAAA,CAAC","file":"","sourceRoot":"../../../../../../../assets/Scripts/src/behavior/decorators","sourcesContent":["import Decorator from '../core/Decorator';\nimport {SUCCESS, ERROR, FAILURE} from '../constants';\nimport BaseNode from '../core/BaseNode';\nimport { BaseNodeData } from '../interf';\n\n/**\n * RepeatUntilSuccess is a decorator that repeats the tick signal until the\n * node child returns `SUCCESS`, `RUNNING` or `ERROR`. Optionally, a maximum\n * number of repetitions can be defined.\n *\n * @module b3\n * @class RepeatUntilSuccess\n * @extends Decorator\n **/\n\nexport default class RepeatUntilSuccess extends Decorator {\n  public maxLoop: number;\n\n  /**\n   * Creates an instance of RepeatUntilSuccess.\n   *\n   * - **maxLoop** (*Integer*) Maximum number of repetitions. Default to -1 (infinite).\n   * - **child** (*BaseNode*) The child node.\n   *\n   * @param {Object} params Object with parameters.\n   * @param {Number} params.maxLoop Maximum number of repetitions. Default to -1 (infinite).\n   * @param {BaseNode} params.child The child node.\n   * @memberof RepeatUntilSuccess\n   **/\n  constructor(maxLoop = -1, child?:BaseNode) {\n    let data:BaseNodeData = {\n      name: 'RepeatUntilSuccess',\n      title: 'Repeat Until Success',\n      properties: {maxLoop: -1},\n    }\n    super(data);\n\n    this.maxLoop = maxLoop;\n  }\n\n  /**\n   * Open method.\n   * @method open\n   * @param {Tick} tick A tick instance.\n   **/\n  open(tick) {\n    tick.blackboard.set('i', 0, tick.tree.id, this.id);\n  }\n\n  /**\n   * Tick method.\n   * @method tick\n   * @param {Tick} tick A tick instance.\n   * @return {Constant} A state constant.\n   **/\n  tick(tick) {\n    if (!this.child) {\n      return ERROR;\n    }\n\n    var i = tick.blackboard.get('i', tick.tree.id, this.id);\n    var status = ERROR;\n\n    while (this.maxLoop < 0 || i < this.maxLoop) {\n      // @ts-ignore\n      status = this.child._execute(tick);\n\n      if (status == FAILURE) {\n        i++;\n      } else {\n        break;\n      }\n    }\n\n    i = tick.blackboard.set('i', i, tick.tree.id, this.id);\n    return status;\n  }\n};\n"]}