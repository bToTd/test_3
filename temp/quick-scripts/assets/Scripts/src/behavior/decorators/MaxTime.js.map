{"version":3,"sources":["MaxTime.ts"],"names":[],"mappings":";;;;;AAAA,+CAA0C;AAC1C,0CAA4C;AAI5C;;;;;;;;;IASI;AAEJ;IAAqC,2BAAS;IAG5C;;;;;;;;;;OAUG;IACH,iBAAY,OAAkB,EAAE,KAAe;QAAnC,wBAAA,EAAA,WAAkB;QAA9B,iBAaC;QAZC,IAAI,IAAI,GAAgB;YACtB,IAAI,EAAE,SAAS;YACf,KAAK,EAAE,iBAAiB;YACxB,UAAU,EAAE,EAAC,OAAO,EAAE,CAAC,EAAC;SACzB,CAAA;QACD,QAAA,kBAAM,IAAI,CAAC,SAAC;QAEZ,IAAI,CAAC,OAAO,EAAE;YACZ,MAAM,mEAAmE,CAAC;SAC3E;QAED,KAAI,CAAC,OAAO,GAAG,OAAO,CAAC;;IACzB,CAAC;IAED;;;;QAII;IACJ,sBAAI,GAAJ,UAAK,IAAI;QACP,IAAI,SAAS,GAAG,CAAC,IAAI,IAAI,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC;QACvC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,WAAW,EAAE,SAAS,EAAE,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC;IACrE,CAAC;IAED;;;;;QAKI;IACJ,sBAAI,GAAJ,UAAK,IAAI;QACP,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE;YACf,OAAO,iBAAK,CAAC;SACd;QAED,IAAI,QAAQ,GAAG,CAAC,IAAI,IAAI,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC;QACtC,IAAI,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,WAAW,EAAE,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC;QAExE,IAAI,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QACvC,IAAI,QAAQ,GAAG,SAAS,GAAG,IAAI,CAAC,OAAO,EAAE;YACvC,OAAO,mBAAO,CAAC;SAChB;QAED,OAAO,MAAM,CAAC;IAChB,CAAC;IACH,cAAC;AAAD,CA5DA,AA4DC,CA5DoC,mBAAS,GA4D7C;;AAAA,CAAC","file":"","sourceRoot":"../../../../../../../assets/Scripts/src/behavior/decorators","sourcesContent":["import Decorator from '../core/Decorator';\nimport {FAILURE, ERROR} from '../constants';\nimport BaseNode from '../core/BaseNode';\nimport { BaseNodeData } from '../interf';\n\n/**\n * The MaxTime decorator limits the maximum time the node child can execute.\n * Notice that it does not interrupt the execution itself (i.e., the child\n * must be non-preemptive), it only interrupts the node after a `RUNNING`\n * status.\n *\n * @module b3\n * @class MaxTime\n * @extends Decorator\n **/\n\nexport default class MaxTime extends Decorator {\n  public maxTime: any;\n\n  /**\n   * Creates an instance of MaxTime.\n   * \n   * - **maxTime** (*Integer*) Maximum time a child can execute.\n   * - **child** (*BaseNode*) The child node.\n\n   * @param {Object} params Object with parameters.\n   * @param {Number} params.maxTime Maximum time a child can execute.\n   * @param {BaseNode} params.child The child node.\n   * @memberof MaxTime\n   */\n  constructor(maxTime:number = 0, child?:BaseNode) {\n    let data:BaseNodeData = {\n      name: 'MaxTime',\n      title: 'Max <maxTime>ms',\n      properties: {maxTime: 0},\n    }\n    super(data);\n\n    if (!maxTime) {\n      throw 'maxTime parameter in MaxTime decorator is an obligatory parameter';\n    }\n\n    this.maxTime = maxTime;\n  }\n\n  /**\n   * Open method.\n   * @method open\n   * @param {Tick} tick A tick instance.\n   **/\n  open(tick) {\n    var startTime = (new Date()).getTime();\n    tick.blackboard.set('startTime', startTime, tick.tree.id, this.id);\n  }\n\n  /**\n   * Tick method.\n   * @method tick\n   * @param {Tick} tick A tick instance.\n   * @return {Constant} A state constant.\n   **/\n  tick(tick) {\n    if (!this.child) {\n      return ERROR;\n    }\n\n    var currTime = (new Date()).getTime();\n    var startTime = tick.blackboard.get('startTime', tick.tree.id, this.id);\n\n    var status = this.child._execute(tick);\n    if (currTime - startTime > this.maxTime) {\n      return FAILURE;\n    }\n\n    return status;\n  }\n};\n"]}