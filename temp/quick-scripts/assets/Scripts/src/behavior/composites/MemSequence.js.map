{"version":3,"sources":["MemSequence.ts"],"names":[],"mappings":";;;;;AAAA,+CAA0C;AAC1C,0CAA8C;AAG9C;;;;;;;;;IASI;AAEJ;IAAyC,+BAAS;IAEhD;;;;;OAKG;IACH,qBAAY,IAAkB;QAA9B,iBAGC;QAFC,IAAI,CAAC,IAAI,GAAG,aAAa,CAAA;QACzB,QAAA,kBAAM,IAAI,CAAC,SAAC;;IACd,CAAC;IAED;;;;QAII;IACJ,0BAAI,GAAJ,UAAK,IAAI;QACP,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,cAAc,EAAE,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC;IAChE,CAAC;IAED;;;;;QAKI;IACJ,0BAAI,GAAJ,UAAK,IAAI;QACP,IAAI,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,cAAc,EAAE,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC;QACvE,KAAK,IAAI,CAAC,GAAC,KAAK,EAAE,CAAC,GAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAC7C,IAAI,MAAM,GAAO,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;YAEjD,IAAI,MAAM,KAAK,mBAAO,EAAE;gBACtB,IAAI,MAAM,KAAK,mBAAO,EAAE;oBACtB,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,cAAc,EAAE,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC;iBAC/D;gBACD,OAAO,MAAM,CAAC;aACf;SACF;QAED,OAAO,mBAAO,CAAC;IACjB,CAAC;IACH,kBAAC;AAAD,CA3CA,AA2CC,CA3CwC,mBAAS,GA2CjD;;AAAA,CAAC","file":"","sourceRoot":"../../../../../../../assets/Scripts/src/behavior/composites","sourcesContent":["import Composite from '../core/Composite';\nimport {SUCCESS, RUNNING} from '../constants';\nimport { BaseNodeData } from '../interf';\n\n/**\n * MemSequence is similar to Sequence node, but when a child returns a\n * `RUNNING` state, its index is recorded and in the next tick the\n * MemPriority call the child recorded directly, without calling previous\n * children again.\n *\n * @module b3\n * @class MemSequence\n * @extends Composite\n **/\n\nexport default class MemSequence extends Composite {\n\n  /**\n   * Creates an instance of MemSequence.\n   * @param {Object} params \n   * @param {Array} params.children \n   * @memberof MemSequence\n   */\n  constructor(data?:BaseNodeData){\n    data.name = 'MemSequence'\n    super(data);\n  }\n\n  /**\n   * Open method.\n   * @method open\n   * @param {b3.Tick} tick A tick instance.\n   **/\n  open(tick) {\n    tick.blackboard.set('runningChild', 0, tick.tree.id, this.id);\n  }\n\n  /**\n   * Tick method.\n   * @method tick\n   * @param {b3.Tick} tick A tick instance.\n   * @return {Constant} A state constant.\n   **/\n  tick(tick) {\n    var child = tick.blackboard.get('runningChild', tick.tree.id, this.id);\n    for (var i=child; i<this.children.length; i++) {\n      var status:any = this.children[i]._execute(tick);\n\n      if (status !== SUCCESS) {\n        if (status === RUNNING) {\n          tick.blackboard.set('runningChild', i, tick.tree.id, this.id);\n        }\n        return status;\n      }\n    }\n\n    return SUCCESS;\n  }\n};\n"]}