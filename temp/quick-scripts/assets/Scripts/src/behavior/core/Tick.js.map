{"version":3,"sources":["Tick.ts"],"names":[],"mappings":";;;;;AAEA;;;;;;;;;;;;;;;;IAgBI;AAEJ;IAQE;;;;QAII;IACJ;QACE,sBAAsB;QAEtB;;;;YAII;QACJ,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QAEjB;;;;WAIG;QACH,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QAElB;;;;YAII;QACJ,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;QAEnB;;;;YAII;QACJ,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;QAEvB,iCAAiC;QAEjC;;;;;YAKI;QACJ,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;QAErB;;;;;;;YAOI;QACJ,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC;IACtB,CAAC;IAED;;;;;QAKI;IACJ,yBAAU,GAAV,UAAW,IAAI;QACb,IAAI,CAAC,UAAU,EAAE,CAAC;QAClB,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAE3B,wBAAwB;IAC1B,CAAC;IAED;;;;;QAKI;IACJ,wBAAS,GAAT,UAAU,IAAI;QACZ,wBAAwB;IAC1B,CAAC;IAED;;;;;QAKI;IACJ,wBAAS,GAAT,UAAU,IAAI;QACZ,wBAAwB;IAC1B,CAAC;IAED;;;;;QAKI;IACJ,yBAAU,GAAV,UAAW,IAAI;QACb,wBAAwB;QACxB,IAAI,CAAC,UAAU,CAAC,GAAG,EAAE,CAAC;IACxB,CAAC;IAED;;;;;QAKI;IACJ,wBAAS,GAAT,UAAU,IAAI;QACZ,wBAAwB;IAC1B,CAAC;IACH,WAAC;AAAD,CAtHA,AAsHC,IAAA;;AAAA,CAAC","file":"","sourceRoot":"../../../../../../../assets/Scripts/src/behavior/core","sourcesContent":["import BaseNode from \"./BaseNode\";\n\n/**\n * A new Tick object is instantiated every tick by BehaviorTree. It is passed\n * as parameter to the nodes through the tree during the traversal.\n *\n * The role of the Tick class is to store the instances of tree, debug,\n * target and blackboard. So, all nodes can access these informations.\n *\n * For internal uses, the Tick also is useful to store the open node after\n * the tick signal, in order to let `BehaviorTree` to keep track and close\n * them when necessary.\n *\n * This class also makes a bridge between nodes and the debug, passing the\n * node state to the debug if the last is provided.\n *\n * @module b3\n * @class Tick\n **/\n\nexport default class Tick {\n  public tree: any;\n  public debug: any;\n  public target: any;\n  public blackboard: any;\n  public _openNodes: Array<BaseNode>;\n  public _nodeCount: number;\n\n  /**\n   * Initialization method.\n   * @method initialize\n   * @constructor\n   **/\n  constructor() {\n    // set by BehaviorTree\n\n    /**\n     * The tree reference.\n     * @property {b3.BehaviorTree} tree\n     * @readOnly\n     **/\n    this.tree = null;\n\n    /**\n     * The debug reference.\n     * @property {Object} debug\n     * @readOnly\n     */\n    this.debug = null;\n\n    /**\n     * The target object reference.\n     * @property {Object} target\n     * @readOnly\n     **/\n    this.target = null;\n\n    /**\n     * The blackboard reference.\n     * @property {b3.Blackboard} blackboard\n     * @readOnly\n     **/\n    this.blackboard = null;\n\n    // updated during the tick signal\n\n    /**\n     * The list of open nodes. Update during the tree traversal.\n     * @property {Array} _openNodes\n     * @protected\n     * @readOnly\n     **/\n    this._openNodes = [];\n\n    /**\n     * The number of nodes entered during the tick. Update during the tree\n     * traversal.\n     *\n     * @property {Integer} _nodeCount\n     * @protected\n     * @readOnly\n     **/\n    this._nodeCount = 0;\n  }\n\n  /**\n   * Called when entering a node (called by BaseNode).\n   * @method _enterNode\n   * @param {Object} node The node that called this method.\n   * @protected\n   **/\n  _enterNode(node) {\n    this._nodeCount++;\n    this._openNodes.push(node);\n\n    // TODO: call debug here\n  }\n\n  /**\n   * Callback when opening a node (called by BaseNode).\n   * @method _openNode\n   * @param {Object} node The node that called this method.\n   * @protected\n   **/\n  _openNode(node) {\n    // TODO: call debug here\n  }\n\n  /**\n   * Callback when ticking a node (called by BaseNode).\n   * @method _tickNode\n   * @param {Object} node The node that called this method.\n   * @protected\n   **/\n  _tickNode(node) {\n    // TODO: call debug here\n  }\n\n  /**\n   * Callback when closing a node (called by BaseNode).\n   * @method _closeNode\n   * @param {Object} node The node that called this method.\n   * @protected\n   **/\n  _closeNode(node) {\n    // TODO: call debug here\n    this._openNodes.pop();\n  }\n\n  /**\n   * Callback when exiting a node (called by BaseNode).\n   * @method _exitNode\n   * @param {Object} node The node that called this method.\n   * @protected\n   **/\n  _exitNode(node) {\n    // TODO: call debug here\n  }\n};\n"]}