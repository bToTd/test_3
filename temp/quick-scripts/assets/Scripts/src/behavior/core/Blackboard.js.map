{"version":3,"sources":["Blackboard.ts"],"names":[],"mappings":";;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAqCI;;AAEJ;IAIE;;;;QAII;IACJ;QACE,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC;QACtB,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC;IACxB,CAAC;IAED;;;;;;;;QAQI;IACJ,mCAAc,GAAd,UAAe,SAAgB;QAC7B,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,EAAE;YAChC,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,GAAG;gBAC5B,YAAY,EAAO,EAAE;gBACrB,WAAW,EAAQ,EAAE;gBACrB,gBAAgB,EAAG,CAAC;gBACpB,gBAAgB,EAAG,CAAC;aACrB,CAAC;SACH;QACD,OAAO,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;IACrC,CAAC;IAED;;;;;;;;;QASI;IACJ,mCAAc,GAAd,UAAe,UAAU,EAAE,SAAS;QAClC,IAAI,MAAM,GAAG,UAAU,CAAC,UAAU,CAAC;QACnC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,EAAE;YACtB,MAAM,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC;SACxB;QAED,OAAO,MAAM,CAAC,SAAS,CAAC,CAAC;IAC3B,CAAC;IAED;;;;;;;;;;;;;QAaI;IACJ,+BAAU,GAAV,UAAW,SAAS,EAAE,SAAS;QAC7B,IAAI,MAAM,GAAG,IAAI,CAAC,WAAW,CAAC;QAE9B,IAAI,SAAS,EAAE;YACb,MAAM,GAAG,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;YAExC,IAAI,SAAS,EAAE;gBACb,MAAM,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;aACjD;SACF;QAED,OAAO,MAAM,CAAC;IAChB,CAAC;IAED;;;;;;;;;;;;;;;QAeI;IACJ,wBAAG,GAAH,UAAI,GAAU,EAAE,KAAY,EAAE,SAAgB,EAAE,SAAgB;QAC9D,IAAI,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;QACnD,MAAM,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;IACtB,CAAC;IAED;;;;;;;;;;;;;;;QAeI;IACJ,wBAAG,GAAH,UAAI,GAAU,EAAE,SAAgB,EAAE,SAAgB;QAChD,IAAI,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;QACnD,OAAO,MAAM,CAAC,GAAG,CAAC,CAAC;IACrB,CAAC;IACH,iBAAC;AAAD,CA3HA,AA2HC,IAAA;;AAAA,CAAC","file":"","sourceRoot":"../../../../../../../assets/Scripts/src/behavior/core","sourcesContent":["/**\n * The Blackboard is the memory structure required by `BehaviorTree` and its\n * nodes. It only have 2 public methods: `set` and `get`. These methods works\n * in 3 different contexts: global, per tree, and per node per tree.\n *\n * Suppose you have two different trees controlling a single object with a\n * single blackboard, then:\n *\n * - In the global context, all nodes will access the stored information.\n * - In per tree context, only nodes sharing the same tree share the stored\n *   information.\n * - In per node per tree context, the information stored in the blackboard\n *   can only be accessed by the same node that wrote the data.\n *\n * The context is selected indirectly by the parameters provided to these\n * methods, for example:\n *\n *     // getting/setting variable in global context\n *     blackboard.set('testKey', 'value');\n *     var value = blackboard.get('testKey');\n *\n *     // getting/setting variable in per tree context\n *     blackboard.set('testKey', 'value', tree.id);\n *     var value = blackboard.get('testKey', tree.id);\n *\n *     // getting/setting variable in per node per tree context\n *     blackboard.set('testKey', 'value', tree.id, node.id);\n *     var value = blackboard.get('testKey', tree.id, node.id);\n *\n * Note: Internally, the blackboard store these memories in different\n * objects, being the global on `_baseMemory`, the per tree on `_treeMemory`\n * and the per node per tree dynamically create inside the per tree memory\n * (it is accessed via `_treeMemory[id].nodeMemory`). Avoid to use these\n * variables manually, use `get` and `set` instead.\n *\n * @module b3\n * @class Blackboard\n **/\n\nexport default class Blackboard {\n  private _baseMemory:any;\n  private _treeMemory:any;\n\n  /**\n   * Initialization method.\n   * @method initialize\n   * @constructor\n   **/\n  constructor() {\n    this._baseMemory = {};\n    this._treeMemory = {};\n  }\n\n  /**\n   * Internal method to retrieve the tree context memory. If the memory does\n   * not exist, this method creates it.\n   *\n   * @method _getTreeMemory\n   * @param {String} treeScope The id of the tree in scope.\n   * @return {Object} The tree memory.\n   * @protected\n   **/\n  _getTreeMemory(treeScope:string) {\n    if (!this._treeMemory[treeScope]) {\n      this._treeMemory[treeScope] = {\n        'nodeMemory'     : {},\n        'openNodes'      : [],\n        'traversalDepth' : 0,\n        'traversalCycle' : 0,\n      };\n    }\n    return this._treeMemory[treeScope];\n  }\n\n  /**\n   * Internal method to retrieve the node context memory, given the tree\n   * memory. If the memory does not exist, this method creates is.\n   *\n   * @method _getNodeMemory\n   * @param {String} treeMemory the tree memory.\n   * @param {String} nodeScope The id of the node in scope.\n   * @return {Object} The node memory.\n   * @protected\n   **/\n  _getNodeMemory(treeMemory, nodeScope) {\n    var memory = treeMemory.nodeMemory;\n    if (!memory[nodeScope]) {\n      memory[nodeScope] = {};\n    }\n\n    return memory[nodeScope];\n  }\n\n  /**\n   * Internal method to retrieve the context memory. If treeScope and\n   * nodeScope are provided, this method returns the per node per tree\n   * memory. If only the treeScope is provided, it returns the per tree\n   * memory. If no parameter is provided, it returns the global memory.\n   * Notice that, if only nodeScope is provided, this method will still\n   * return the global memory.\n   *\n   * @method _getMemory\n   * @param {String} treeScope The id of the tree scope.\n   * @param {String} nodeScope The id of the node scope.\n   * @return {Object} A memory object.\n   * @protected\n   **/\n  _getMemory(treeScope, nodeScope) {\n    var memory = this._baseMemory;\n\n    if (treeScope) {\n      memory = this._getTreeMemory(treeScope);\n\n      if (nodeScope) {\n        memory = this._getNodeMemory(memory, nodeScope);\n      }\n    }\n\n    return memory;\n  }\n\n  /**\n   * Stores a value in the blackboard. If treeScope and nodeScope are\n   * provided, this method will save the value into the per node per tree\n   * memory. If only the treeScope is provided, it will save the value into\n   * the per tree memory. If no parameter is provided, this method will save\n   * the value into the global memory. Notice that, if only nodeScope is\n   * provided (but treeScope not), this method will still save the value into\n   * the global memory.\n   *\n   * @method set\n   * @param {String} key The key to be stored.\n   * @param {String} value The value to be stored.\n   * @param {String} treeScope The tree id if accessing the tree or node\n   *                           memory.\n   * @param {String} nodeScope The node id if accessing the node memory.\n   **/\n  set(key:string, value:string, treeScope:string, nodeScope:string) {\n    var memory = this._getMemory(treeScope, nodeScope);\n    memory[key] = value;\n  }\n\n  /**\n   * Retrieves a value in the blackboard. If treeScope and nodeScope are\n   * provided, this method will retrieve the value from the per node per tree\n   * memory. If only the treeScope is provided, it will retrieve the value\n   * from the per tree memory. If no parameter is provided, this method will\n   * retrieve from the global memory. If only nodeScope is provided (but\n   * treeScope not), this method will still try to retrieve from the global\n   * memory.\n   *\n   * @method get\n   * @param {String} key The key to be retrieved.\n   * @param {String} treeScope The tree id if accessing the tree or node\n   *                           memory.\n   * @param {String} nodeScope The node id if accessing the node memory.\n   * @return {Object} The value stored or undefined.\n   **/\n  get(key:string, treeScope:string, nodeScope:string) {\n    var memory = this._getMemory(treeScope, nodeScope);\n    return memory[key];\n  }\n};\n"]}