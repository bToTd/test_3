{"version":3,"sources":["Wait.ts"],"names":[],"mappings":";;;;;AAAA,yCAAoC;AACpC,0CAA8C;AAE9C;;;;;;IAMI;AAEJ;IAAkC,wBAAM;IAGtC;;;;;OAKG;IACH,cAAY,EAAuB;YAAtB,2CAAgB,EAAhB,qCAAgB;QAA7B,YACE,kBAAM;YACJ,IAAI,EAAE,MAAM;YACZ,KAAK,EAAE,uBAAuB;YAC9B,UAAU,EAAE,EAAC,YAAY,EAAE,CAAC,EAAC;SAC9B,CAAC,SAGH;QADC,KAAI,CAAC,OAAO,GAAG,YAAY,CAAC;;IAC9B,CAAC;IAED;;;;QAII;IACJ,mBAAI,GAAJ,UAAK,IAAI;QACP,IAAI,SAAS,GAAG,CAAC,IAAI,IAAI,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC;QACvC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,WAAW,EAAE,SAAS,EAAE,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC;IACrE,CAAC;IAED;;;;;QAKI;IACJ,mBAAI,GAAJ,UAAK,IAAI;QACP,IAAI,QAAQ,GAAG,CAAC,IAAI,IAAI,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC;QACtC,IAAI,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,WAAW,EAAE,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC;QAExE,IAAI,QAAQ,GAAG,SAAS,GAAG,IAAI,CAAC,OAAO,EAAE;YACvC,OAAO,mBAAO,CAAC;SAChB;QAED,OAAO,mBAAO,CAAC;IACjB,CAAC;IACH,WAAC;AAAD,CA7CA,AA6CC,CA7CiC,gBAAM,GA6CvC;;AAAA,CAAC","file":"","sourceRoot":"../../../../../../../assets/Scripts/src/behavior/actions","sourcesContent":["import Action from '../core/Action';\nimport {SUCCESS, RUNNING} from '../constants';\n\n/**\n * Wait a few seconds.\n *\n * @module b3\n * @class Wait\n * @extends Action\n **/\n\nexport default class Wait extends Action {\n\n  private endTime:Number;\n  /**\n   * Creates an instance of Wait.\n   * @param {Object} settings Object with parameters\n   * @param {Number} settings.milliseconds Maximum time, in milliseconds, a child can execute.\n   * @memberof Wait\n   */\n  constructor({milliseconds = 0} = {}) {\n    super({\n      name: 'Wait',\n      title: 'Wait <milliseconds>ms',\n      properties: {milliseconds: 0},\n    });\n\n    this.endTime = milliseconds;\n  }\n\n  /**\n   * Open method.\n   * @method open\n   * @param {Tick} tick A tick instance.\n   **/\n  open(tick) {\n    var startTime = (new Date()).getTime();\n    tick.blackboard.set('startTime', startTime, tick.tree.id, this.id);\n  }\n\n  /**\n   * Tick method.\n   * @method tick\n   * @param {Tick} tick A tick instance.\n   * @return {Constant} A state constant.\n   **/\n  tick(tick) {\n    var currTime = (new Date()).getTime();\n    var startTime = tick.blackboard.get('startTime', tick.tree.id, this.id);\n\n    if (currTime - startTime > this.endTime) {\n      return SUCCESS;\n    }\n\n    return RUNNING;\n  }\n};\n"]}